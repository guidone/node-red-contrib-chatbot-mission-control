(window.webpackJsonpnode_red_contrib_chatbot_mission_control=window.webpackJsonpnode_red_contrib_chatbot_mission_control||[]).push([[674],{9674:(e,t,n)=>{"use strict";n.r(t);var a=n(67294),l=n.n(a),r=n(18985),s=n(80218),o=n(45697),i=n.n(o),c=n(44119),u=n.n(c),m=n(96486),d=n.n(m),p=n(65092),g=n(58971),h=n(29788),f=n(49762),y=n(53074),E=n(73727),b=n(30277),v=n(41567),w=n(1481),Z=n(33092),x=n(87103),k=n(15284),C=n(97604),S=n(18499);const q=u()`
mutation($id: Int!) {
  deleteRecord(id: $id) {
    id
  }
}`,{Column:T,HeaderCell:N,Cell:I}=p.Z,R=u()`
query($offset: Int, $limit: Int, $order: String, $type: String, $userId: String, $status: String) {
  counters {
    rows: records {
     count(type: $type, userId: $userId, status: $status)
    }
  }
  rows: records(offset: $offset, limit: $limit, order: $order, type: $type, userId: $userId, status: $status) {
    id,
    createdAt,
    title,
    payload,
    type,
    status,
    userId
  }
}
`,A=({type:e,title:t,breadcrumbs:n})=>{const s=(0,a.useRef)(),{props:o}=(0,r.useCodePlug)("user-record-types"),{error:i,saving:c,deleteRecord:u}=(({onCompleted:e=(()=>{})}={})=>{const[t,{loading:n,error:a}]=(0,S.Db)(q,{onCompleted:e});return{saving:n,error:a,deleteRecord:t}})(),m=o.find(t=>t.type===e),p=d().isArray(m.status)&&!d().isEmpty(m.status),A=[{name:"userId",label:"User",control:x.P2,width:350}];return p&&A.push({name:"status",label:"Status",control:g.Z,data:m.status,searchable:!1}),l().createElement(b.Z,{className:"page-contents"},l().createElement(v.Z,{pages:null!=n?n:[t]}),null!=i&&l().createElement(C.Z,{error:i}),l().createElement(Z.Z,{ref:s,query:R,variables:{type:e},initialSortField:"createdAt",initialSortDirection:"desc",toolbar:l().createElement(h.Z,{appearance:"primary",onClick:()=>s.current.refetch()},"Refetch"),filtersSchema:A,height:600,labels:{empty:"No "+m.list.toLowerCase()},autoHeight:!0},l().createElement(T,{width:60,align:"center"},l().createElement(N,null,"Id"),l().createElement(I,{dataKey:"id"})),l().createElement(T,{width:160,resizable:!0,sortable:!0},l().createElement(N,null,"Date"),l().createElement(I,{dataKey:"createdAt"},({createdAt:e})=>l().createElement(w.Z,{date:e}))),l().createElement(T,{width:100,resizable:!0},l().createElement(N,null,"userId"),l().createElement(I,null,({userId:e})=>l().createElement("span",{className:"cell-type-id"},e))),p&&l().createElement(T,{width:100,resizable:!0},l().createElement(N,null,"Status"),l().createElement(I,null,({status:e})=>l().createElement("span",null,e))),l().createElement(T,{flexGrow:1,align:"left",sortable:!0,resizable:!0},l().createElement(N,null,"Title"),l().createElement(I,null,({title:e,id:t})=>l().createElement(E.rU,{to:"/record/"+t},e))),l().createElement(T,{width:80},l().createElement(N,null,"Action"),l().createElement(I,null,e=>l().createElement(f.Z,null,l().createElement(h.Z,{disabled:c,size:"xs",onClick:async()=>{await(0,k.Z)(l().createElement("div",null,"Delete record ",l().createElement("em",null,'"',e.title,'"'),"?"),{okLabel:"Yes, delete"})&&(await u({variables:{id:e.id}}),s.current.refetch())}},l().createElement(y.Z,{icon:"trash"})))))))};A.propTypes={type:i().string,title:i().string,labels:i().shape({}),breadcrumbs:i().arrayOf(i().oneOfType([i().string,i().shape({title:i().string,url:i().string})]))};const O=A;var j=n(94184),z=n.n(j);n(70361);const B=({question:e})=>{switch(e.type){case"text":case"number":return l().createElement("div",{className:z()("answer",{[e.type]:!0})},e.answer);case"multiple":return l().createElement("div",{className:"answer multiple"},e.data.map((t,n)=>l().createElement("div",{className:z()("choice",{selected:t.answer===e.answer||t.value===e.answer})},l().createElement("span",{className:"placeholder"},"ABCDEFGHILMNOPQRTSUVZ"[n])," ",t.answer)))}};B.propTypes={question:i().shape({type:i().oneOf(["text","number","multiple","image"]),answer:i().string,data:i().oneOfType([i().string,i().shape({answer:i().string,value:i().string})])})};const M=({record:e})=>{const{payload:t}=e;return l().createElement("div",{className:"survey-viewer"},t.map(e=>l().createElement("div",{key:e.id,className:"question"},l().createElement("h5",null,e.title),l().createElement(B,{question:e}))))};M.propTypes={record:i().shape({question:i().shape({type:i().oneOf(["text","number","multiple","image"]),answer:i().string,data:i().oneOfType([i().string,i().shape({answer:i().string,value:i().string})])})})};const F=M;var K=n(89155),P=n(12760),V=n(80091),L=n(77410),D=n(20442),H=n(90631),$=n(2616),U=n(18964),W=n(11954),J=n(81442),Q=n(18139),X=(n(83534),n(40660)),G=n(51306);n(81385);const Y=({icon:e,text:t,tooltip:n,color:a})=>{const r=l().createElement("div",{className:z()("ui-badge-icon-tooltip",{[a]:!0})},l().createElement(y.Z,{icon:e}),null!=t&&l().createElement("span",{className:"text"},t));return null!=n?l().createElement(X.Z,{trigger:"hover",placement:"top",speaker:l().createElement(G.Z,null,n)},r):r};Y.propTypes={color:i().oneOf(["red","orange"]),text:i().oneOfType([i().string,i().number]),icon:i().string,tooltip:i().string};const ee=Y;var te=n(89113);const ne=(e,t)=>e.find(e=>e.id===t.id),ae=(e,t)=>null!=t.parent?e.find(e=>e.id===t.parent):null,le=(e,t)=>e.some(e=>e.parent===t.id),re=e=>{const t={};return e.forEach(n=>{if(null!=n.parent&&null==t[n.parent]){const a=e.find(e=>e.id===n.parent);null!=a.parent?t[n.parent]=t[a.parent]+1:t[n.parent]=1}}),t},se=e=>{const t=re(e),n={root:0},a=t=>{if(null==t)return"";const l=null!=t.parent?e.find(e=>e.id===t.parent):null;return`${null!=l?a(l):""}${n[null!=l?l.id:"root"]}.`},l=t=>{const l=null!=t.parent?e.find(e=>e.id===t.parent):null;let r;return null!=l?null!=n[l.id]?(n[l.id]+=1,r=n[l.id]):(n[l.id]=1,r=1):(n.root+=1,r=n.root),`Q${a(l)}${r}`};return e.map(e=>({...e,tag:l(e),level:d().isEmpty(e.parent)?0:t[e.parent]}))},oe=l().createContext({});n(34568);const ie=({children:e,size:t="small"})=>l().createElement("div",{className:z()("question-tag",{[t]:!0})},e),ce=(0,Q.JV)(()=>l().createElement("div",{className:"grippy"})),ue=({question:e,onSelect:t=(()=>{}),active:n=!1,level:r=null})=>{const{questions:s}=(0,a.useContext)(oe),o=(_.isArray(e.data)?e.data:[]).filter(e=>null!=e.jump).map(e=>{const t=s.find(t=>t.id===e.jump);if(null!=t)return l().createElement(ee,{key:t.tag,icon:"code-fork",text:t.tag,color:"orange",tooltip:`Jump to ${t.tag} if user selects "${e.answer}"`})});let i;if(null!=e.parent&&((e,t)=>{const n=e.findIndex(e=>e.id===t.id);return-1!==n&&0!==n&&t.parent===e[n-1].id})(s,e)){_(s).chain().filter(e=>"multiple"===e.type).map(e=>_.isArray(e.data)?e.data:[]).flatten().some(t=>t.jump===e.id).value()||(i=l().createElement(ee,{icon:"exclamation-triangle",key:"jump-warning",color:"red",tooltip:"No conditional jump to this question.\n        This is a nested question and can only be reached in the survey with a conditional answer in a multiple choice question"}))}return l().createElement("div",{className:z()("ui-survey-question",{active:n})},null!=r&&l().createElement("div",{className:"indent",style:{flex:`0 0 ${8*r}px`}}),l().createElement(ce,null),l().createElement("div",{className:"content",onClick:n=>{n.preventDefault(),t(e)}},l().createElement("div",{className:"meta"},l().createElement(ie,null,e.tag),l().createElement("div",{className:"icons"},o,i,"multiple"===e.type&&l().createElement(ee,{icon:"list",text:e.data.length,tooltip:"Multiple choice question"}),"text"===e.type&&l().createElement(ee,{icon:"font",tooltip:"Free text question"}),"number"===e.type&&l().createElement(ee,{icon:"percent",tooltip:"Numeric question"}),"image"===e.type&&l().createElement(ee,{icon:"image",tooltip:"Image   question"}))),l().createElement("div",{className:"title"},e.title)),l().createElement("div",{className:"selection-bar"}))};ue.propTypes={question:i().shape({id:i().string.isRequired,level:i().number,tag:i().string,title:i().string.isRequired,type:i().oneOf(["multiple","string","number","image"]).isRequired,data:i().oneOfType([i().arrayOf(i().shape({answer:i().string.isRequired,id:i().string.isRequired,jump:i().string,value:i().string}))])}),onSelect:i().func,active:i().bool,level:i().number};const me=(0,Q.gU)(ue);var de=n(89082),pe=n(53348),ge=n(71368),he=n(73935),fe=n.n(he),ye=n(62863);let Ee=null;function be({okButtonText:e="Ok",onOk:t,showCancelButton:n=!0,cancelButtonText:r="Cancel",onCancel:s,children:o}){const[i,c]=(0,a.useState)(!0),u=(0,a.useCallback)(()=>{c(!1),t&&t()},[t]),m=(0,a.useCallback)(()=>{c(!1),s&&s()},[s]);return l().createElement(ye.Z,{size:"sm",show:i},l().createElement(ye.Z.Body,null,o),l().createElement(ye.Z.Footer,null,n&&l().createElement(h.Z,{onClick:m},r),l().createElement(h.Z,{onClick:u,appearance:"primary"},e)))}const ve=(e,t,{okLabel:n="Ok",cancelLabel:a="Cancel"}={})=>{let r={...t};return new Promise(t=>{fe().render(l().createElement(be,{okButtonText:n,cancelButtonText:a,key:Date.now(),onOk:()=>t(r),onCancel:()=>t(null)},l().createElement(e,{formValue:r,onChange:e=>r=e})),(Ee||(Ee=document.createElement("div"),document.body.appendChild(Ee)),Ee))})};n(89907);const we=({formValue:e,questions:t,onChange:n=(()=>{}),exclude:a})=>l().createElement("div",null,l().createElement(P.Z,{formDefaultValue:e,onChange:n,fluid:!0},l().createElement(V.Z,null,l().createElement(D.Z,null,"Jump To Question"),l().createElement(L.Z,{name:"jump",accepter:g.Z,block:!0,data:t.filter(e=>null==a||e.id!==a).map(e=>({value:e.id,label:e.title,...e})),renderMenuItem:(e,t)=>l().createElement("div",null,l().createElement(ie,null,t.tag)," ",t.title),renderValue:(e,t)=>l().createElement("div",null,l().createElement(ie,null,t.tag)," ",t.title),onClean:()=>n({...e,jump:null})}),l().createElement($.Z,null,"Select the question to jump to if the user select this the answer ",l().createElement("em",null,'"',e.answer,'"'))))),Ze=l().createContext({});function xe(){return(xe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const ke=({formValue:e,onChange:t=(()=>{})})=>l().createElement("div",null,l().createElement(P.Z,{formDefaultValue:e,onChange:e=>{d().isEmpty(e.value)&&(e.value=null),t(e)},fluid:!0},l().createElement(V.Z,null,l().createElement(D.Z,null,"Store value for the answer"),l().createElement(L.Z,{name:"value",accepter:H.Z}),l().createElement($.Z,null,"Select the value for the answer ",l().createElement("em",null,'"',e.answer,'"')," (which is what the user will see), select tha real value that will be stored (generally a more concise string)"))));ke.propTypes={formDefaultValue:i().shape({value:i().string}),onChange:i().func};const Ce=({value:e,onChange:t,order:n})=>{const{questions:r}=(0,a.useContext)(oe),{question:s}=(0,a.useContext)(Ze);return l().createElement("div",{className:"ui-survey-editor-multiple-answer"},l().createElement("div",{className:"placeholder"},"ABCDEFGHILMNOPQRTSUVZ"[n]),l().createElement("div",{className:"answer"},l().createElement(H.Z,{value:e.answer,onChange:n=>t({...e,answer:n})})),l().createElement("div",{className:"controls"},l().createElement(pe.Z,{appearance:null!=e.value?"primary":"default",icon:l().createElement(y.Z,{icon:"align-justify",size:"lg"}),onClick:async()=>{const n=await ve(ke,e);null!=n&&t({...e,value:n.value})}})," ",l().createElement(pe.Z,{appearance:null!=e.jump?"primary":"default",icon:l().createElement(y.Z,{icon:"arrow-circle-right",size:"lg"}),onClick:async()=>{const n=await ve(e=>l().createElement(we,xe({},e,{exclude:s.id,questions:r})),e);null!=n&&t({...e,jump:n.jump})}})))};Ce.propTypes={value:i().shape({answer:i().string.isRequired,id:i().string.isRequired,jump:i().string,value:i().string}),onChange:i().func,order:i().number};const Se=({data:e,onChange:t=(()=>{})})=>l().createElement("div",{className:"control control-multiple"},l().createElement(ge.Z,{value:e,form:Ce,onChange:t,labelAdd:"Add answer",labelEmpty:"No answers"}));Se.propTypes={onChange:i().func,data:i().oneOfType([i().arrayOf(i().shape({answer:i().string.isRequired,id:i().string.isRequired,jump:i().string,value:i().string}))])};const qe=Se;n(7454);const Te=[{type:"multiple",label:"Multiple Choice",default:[]},{type:"text",label:"Free Text",default:null},{type:"number",label:"Number",default:null},{type:"image",label:"Upload image",default:null}],Ne=({question:e,onChange:t=(()=>{}),onRemove:n=(()=>{}),onAdd:a=(()=>{})})=>{let r;switch(e.type){case"multiple":r=l().createElement(qe,{data:e.data,onChange:n=>t({...e,data:n})});break;default:r=l().createElement("div",{className:"control control-empty"},"No configuration available for this type of question")}return l().createElement(Ze.Provider,{value:{question:e}},l().createElement("div",{className:"question-detail"},l().createElement("div",{className:"header"},l().createElement(ie,{size:"large"},e.tag),l().createElement("div",{className:"buttons"},l().createElement(U.Z,null,l().createElement(de.Z,{renderTitle:()=>l().createElement(pe.Z,{appearance:"primary",icon:l().createElement(y.Z,{icon:"plus"})})},l().createElement(de.Z.Item,{onSelect:()=>a({after:e})},"Add question after"),l().createElement(de.Z.Item,{onSelect:()=>a({before:e})},"Add question before"),l().createElement(de.Z.Item,{onSelect:()=>a({nested:e})},"Add nested question")),l().createElement(pe.Z,{onClick:async()=>{await(0,k.Z)(l().createElement("div",null,"Remove the question ",l().createElement(ie,null,e.tag),_.isEmpty(e.title)?null:l().createElement("em",null,' "',e.title,'"')," ?"),{okLabel:"Yes, remove"})&&n(e)},icon:l().createElement(y.Z,{icon:"trash2"})})))),l().createElement("div",{className:"title"},l().createElement("textarea",{className:"rs-input",rows:3,value:e.title,onChange:n=>t({...e,title:n.target.value})})),l().createElement(U.Z,null,l().createElement(f.Z,null,Te.map(n=>l().createElement(h.Z,{key:n.type,appearance:e.type===n.type?"primary":"ghost",onClick:()=>t({...e,type:n.type,data:n.default})},n.label)))),l().createElement("div",{className:"configuration"},r)))};Ne.propTypes={question:i().shape({id:i().string.isRequired,level:i().number,tag:i().string,title:i().string.isRequired,type:i().oneOf(["multiple","string","number","image"]).isRequired,data:i().oneOfType([i().arrayOf(i().shape({answer:i().string.isRequired,id:i().string.isRequired,jump:i().string,value:i().string}))])}),onChange:i().func,onAdd:i().func,onRemove:i().func};const Ie=Ne,Re=(0,Q.hv)(({children:e})=>l().createElement("div",{className:"questions"},e)),Ae=({value:e=[{}],onChange:t=(()=>{})})=>{const[n,r]=(0,a.useState)();(0,a.useEffect)(()=>{null==n&&r(d().isEmpty(e)?null:e[0].id)},[e]);const s=(0,a.useCallback)(({oldIndex:n,newIndex:a})=>{const l=((e,t,n)=>{if(t===n)return e;const a=[...e],l=n,r=t,s=l<0?a.length+l:l,o=a.splice(r,1)[0];a.splice(s,0,o);const i=a[n],c=n>0?a[n-1]:null,u=le(e,i),m=ae(e,i);return null!=c&&le(e,c)?a[n].parent=c.id:a[n].parent=null,u&&e.forEach(e=>{e.parent===i.id&&(e.parent=null!=m?m.id:null)}),a})(e,n,a);t(se(l))}),o=e.find(e=>e.id===n),i=re(e);return l().createElement(oe.Provider,{value:{questions:e}},l().createElement("div",{className:"ui-survey-editor"},l().createElement(Re,{onSortEnd:s,helperClass:"sorting",useDragHandle:!0},e.map((e,t)=>l().createElement(me,{key:e.id,index:t,question:e,level:null!=e.parent?i[e.parent]:null,active:n===e.id,onSelect:e=>r(e.id)}))),l().createElement("div",{className:"question-detail"},null!=o&&l().createElement(Ie,{key:o.id,question:o,onChange:a=>t(((e,t,n)=>{const a=[...e];return a[e.findIndex(e=>e.id===t)]=n,a})(e,n,a)),onRemove:n=>{r(null),t(se(((e,t)=>{const n=ae(e,t);return e.filter(e=>e.id!==t.id).map(e=>e.parent==t.id?null!=n?{...e,parent:n.id}:d().omit(e,"parent"):e)})(e,n)))},onAdd:n=>{const{questions:a,question:l}=((e,t)=>{const n={id:(0,te.Z)("q_"),title:"",type:"multiple",data:[]};let a;if(null!=t.after){const l=ne(e,t.after);le(e,l)?n.parent=l.id:n.parent=l.parent,a=d().flatten(e.map(e=>e.id===l.id?[l,n]:e))}else if(null!=t.before){const l=ne(e,t.before);n.parent=l.parent,a=d().flatten(e.map(e=>e.id===l.id?[n,l]:e))}else if(null!=t.nested){const l=ne(e,t.nested);n.parent=l.id,a=d().flatten(e.map(e=>e.id===l.id?[l,n]:e))}return{question:n,questions:se(a)}})(e,n);r(l.id),t(a)}}))))};Ae.propTypes={onChange:i().func,disabled:i().bool,value:i().arrayOf(i().shape({id:i().string.isRequired,level:i().number,tag:i().string,title:i().string.isRequired,type:i().oneOf(["multiple","string","number","image"]).isRequired,data:i().oneOfType([i().arrayOf(i().shape({answer:i().string.isRequired,id:i().string.isRequired,jump:i().string,value:i().string}))])}))};const Oe=Ae,je=[{name:"survey.intro",description:"Text shown at the beginning of the survey if no content is provided"},{name:"survey.end1",description:"End of the survey (version 1)"},{name:"survey.end2",description:"End of the survey (version 2)"},{name:"survey.end3",description:"End of the survey (version 3)"},{name:"survey.wrongAnswer",description:"When the user input a wrong answer, for example an answer which is not listed in the multiple choice,\n      a string where is expected a number, etc  "},{name:"survey.error",description:"Shown when unrecoverable error happened in the survey flow"}],ze=({user:e})=>l().createElement(E.rU,{to:"/surveys?userId="+e.userId},l().createElement(h.Z,{appearance:"ghost"},"View Surveys"));(0,r.plug)("sidebar",null,{id:"surveys",label:"Surveys",icon:"logo-survey",permission:"surveys.view",options:[{id:"answer-surveys",label:"Surveys",url:"/surveys"},{id:"configuration-survey",label:"Configure survey",url:"/configuration-surveys"}]}),(0,r.plug)("pages",(0,s.Z)("survey",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,s]=(0,a.useState)(e),[o,i]=(0,a.useState)(null),[c,u]=(0,a.useState)("questions"),m=(0,a.useRef)(null);return l().createElement("div",null,l().createElement(K.Z,{appearance:"tabs",activeKey:c,onSelect:u,style:{marginBottom:"25px"}},l().createElement(K.Z.Item,{eventKey:"surveys"},"Survey"),l().createElement(K.Z.Item,{eventKey:"questions"},"Questions"),l().createElement(K.Z.Item,{eventKey:"translations"},"Translations")),l().createElement(P.Z,{disabled:!0,formValue:r,formError:o,ref:m,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),i(null)},onCheck:e=>{i(e)}},"translations"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(L.Z,{name:"translations",accepter:W.Z,schema:je,disabled:n}))),"surveys"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(D.Z,null,"Name"),l().createElement(L.Z,{name:"name",autocomplete:"off",accepter:H.Z,disabled:n})),l().createElement(V.Z,null,l().createElement(D.Z,null,"Introduction Message",l().createElement($.Z,{tooltip:!0},"Select the content to show when the user starts the survey")),l().createElement(L.Z,{name:"introduction",accepter:J.Z,useSlug:!0,disabled:n}))),"questions"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(L.Z,{name:"questions",accepter:Oe,disabled:n}))),l().createElement(V.Z,{style:{marginTop:"40px"}},l().createElement(U.Z,null,l().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{m.current.check()&&t(r)}},"Save configuration"),l().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>l().createElement("div",null,"Survues TBD"),title:"Surveys"}),{permission:"configure",url:"/configuration-surveys",title:"Survey",id:"configuration-surveys"}),(0,r.plug)("pages",O,{url:"/surveys",title:"Surveys",id:"surveys",type:"survey",permission:"surveys.view",breadcrumbs:["Surveys"],labels:{}}),(0,r.plug)("permissions",null,{permission:"surveys.view",name:"View surveys",description:"View surveys answered by chatbot users",group:"Surveys"}),(0,r.plug)("user-record-types",null,{type:"survey",name:"Survey",list:"Surveys",description:"Answer to surveys",form:F,status:[{value:"new",label:"New"},{value:"viewed",label:"Viewed"}]}),(0,r.plug)("user-button",ze);var _e=n(58222),Be=n(81711);function Me(){return(Me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var Fe=n(22057),Ke=n(4507);const Pe=e=>{const{state:t,dispatch:n}=(0,a.useContext)(Be.Z),l=Object.keys(e);(0,a.useEffect)(()=>{l.forEach(a=>{void 0===t[a]&&n({type:"default",key:a,value:e[a]})})},[]);return{state:l.reduce((n,a)=>(n[a]=void 0!==t[a]?t[a]:e[a],n),{}),dispatch:n}};var Ve=n(6659),Le=n(95778),De=(n(87499),n(97099)),He=n(74730),$e=n(34715),Ue=n(5606),We=n(44721);const Je=({params:e,onCancel:t=(()=>{}),onSubmit:n=(()=>{}),disabled:r=!1,activeChatbots:s})=>{const[o,i]=(0,a.useState)(e);return l().createElement(ye.Z,{backdrop:!0,show:!0,onHide:t,keyboard:!1,className:"modal-simulator"},l().createElement(ye.Z.Header,null,l().createElement(ye.Z.Title,null,"Simulator Configuration")),l().createElement(ye.Z.Body,null,l().createElement(P.Z,{formValue:o,onChange:e=>{const t={...e};null==e.user||null!=o.user&&o.user.id===e.user.id||!e.user.language||(t.language=e.user.language),i(t)},fluid:!0},l().createElement(V.Z,null,l().createElement(D.Z,null,"Impersonated User"),l().createElement(L.Z,{accepter:Ue.Z,name:"user",placeholder:"Test User",style:{width:"100%"}})),l().createElement(He.Z,{justify:"space-between",style:{marginBottom:"20px"}},l().createElement(He.Z.Item,{colspan:11},l().createElement(V.Z,null,l().createElement(D.Z,null,"Language"),l().createElement(L.Z,{accepter:$e.Z,name:"language",block:!0}))),l().createElement(He.Z.Item,{colspan:11},l().createElement(V.Z,null,l().createElement(D.Z,null,"Transport"),l().createElement(L.Z,{accepter:We.Z,name:"nodeId",block:!0,size:"sm",cleanable:!1})))))),l().createElement(ye.Z.Footer,null,l().createElement(h.Z,{onClick:t,appearance:"subtle"},"Cancel"),l().createElement(h.Z,{appearance:"primary",disabled:r,appearance:"primary",onClick:()=>n({...o,chatBot:s.find(e=>e.nodeId===o.nodeId)})},"Save configuration")))};Je.propTypes={params:i().shape({language:i().string,user:i().shape({id:i().number,userId:i().string,username:i().string,language:i().string}),nodeId:i().string}),disabled:i().bool,onCancel:i().func,onSubmit:i().func,activeChatbots:i().arrayOf(i().shape({transport:i().string,nodeId:i().string,name:i().string}))};const Qe=Je,Xe=({user:e,language:t,nodeId:n,activeChatbots:r,dispatch:s})=>{const[o,i]=(0,a.useState)(null);return l().createElement("div",{className:"simulator-transport-menu cancel-drag"},null!=o&&l().createElement(Qe,{activeChatbots:r,params:o,onCancel:()=>i(null),onSubmit:e=>{s({type:"params",params:e}),i(null)}}),l().createElement("div",{className:"meta"},null!=e&&l().createElement("div",{className:"user"},e.username," ",l().createElement("em",null,"(",e.userId,")")),null==e&&l().createElement("div",{className:"user"},"Test User"),l().createElement(De.Z,null,t)),l().createElement(pe.Z,{appearance:"subtle",icon:l().createElement(y.Z,{icon:"cog"}),onClick:()=>i({user:e,language:t,nodeId:n}),style:{marginTop:"-3px",marginRight:"1px"}}))};Xe.propTypes={user:i().shape({id:i().number,userId:i().string,username:i().string,language:i().string}),language:i().string,nodeId:i().string,dispatch:i().func,activeChatbots:i().arrayOf(i().shape({transport:i().string,nodeId:i().string,name:i().string}))};const Ge=Xe;var Ye=n(30381),et=n.n(Ye);const tt=(e,t)=>{switch(t.type){case"message":const{payload:n,topic:a}=t;if("simulator"!==a)return e;const l=d().isArray(e.simulator.messages[n.transport])?e.simulator.messages[n.transport]:[];let r;r=d().isArray(n.payload)?n.payload.map(e=>({...n,...e,payload:void 0,ts:et()()})):{...n,ts:et()()};const s={...e.messages,[n.transport]:[...l,r]};return{...e,simulator:{...e.simulator,messages:s}};case"clear":return{...e,simulator:{...e.simulator,messages:{...e.messages,[t.transport]:[]}}};case"globals":return{...e,simulator:{...e.simulator,globals:t.globals}};case"params":const{params:o}=t;return{...e,simulator:{...e.simulator,transport:o.chatBot.transport,nodeId:o.chatBot.nodeId,language:o.language,user:o.user}};default:return e}},nt=l().createContext();var at;(0,r.plug)("widgets",(0,Fe.Z)((at=({activeChatbots:e,user:t})=>{const{state:{simulator:n},dispatch:a,sendMessage:r}=(({activeChatbots:e})=>{const{state:t,dispatch:n}=Pe({simulator:{messages:{},transport:d().isEmpty(e)?null:e[0].transport,nodeId:d().isEmpty(e)?null:e[0].nodeId,globals:null,language:"en",user:null}}),{sendMessage:a}=(0,Ke.ZP)({onMessage:(e,t)=>{"simulator"===e&&n({type:"message",payload:t,topic:e})}});return{state:t,dispatch:n,sendMessage:(e,{echo:n=!0}={})=>{const{transport:l,nodeId:r,language:s,user:o}=t.simulator;a("simulator",{transport:l,nodeId:r,language:s,userId:null!=o?o.userId:42,username:null!=o?o.username:"testUser",firstName:null!=o?o.first_name:null,lastName:null!=o?o.last_name:null,payload:{content:e,type:"message"},simulatorOptions:{echo:n}})}}})({activeChatbots:e}),{messages:s,transport:o,nodeId:i,language:c,user:u}=n,m=null==e,p=e=>{!d().isObject(e)||"postback"!==e.type&&"quick-reply"!==e.type||r(e.value,{echo:!1})};return l().createElement(_e.Z,{title:"Chat Simulator",className:"chat-simulator",menu:!m&&l().createElement(Ge,{user:u,language:c,nodeId:i,transport:o,dispatch:a,activeChatbots:e,onChange:e=>a({type:"chatBot",chatBot:e})})},!m&&l().createElement(nt.Provider,{value:n},l().createElement(Ve.zL,null,l().createElement(Ve.Vm,null,null!=s[o]&&s[o].map(e=>d().isArray(e)?l().createElement(Le.Z,{onClick:p,key:e.map(e=>e.messageId).join(),message:e.map(e=>({...e,username:"chatbot"}))}):l().createElement(Le.Z,{onClick:p,key:e.messageId,message:e.inbound?e:{...e,username:"chatbot"}}))),l().createElement(Ve.M9,{onSend:e=>r(e),onClear:()=>a({type:"clear",transport:o})}))))},e=>l().createElement(Be.Z.Consumer,null,({activeChatbots:t})=>l().createElement(at,Me({},e,{activeChatbots:t}),e.children))),"user"),{x:0,y:0,w:2,h:8,isResizable:!0,id:"simulator-widget",permission:"simulator"}),(0,r.plug)("reducers",(e,t)=>"default"===t.type?{...e,[t.key]:t.value}:e),(0,r.plug)("reducers",tt),(0,r.plug)("permissions",null,{permission:"simulator",name:"Chat Simulator",description:"Access to chat simulator",group:"General"});var lt=n(25870),rt=n(2484),st=n(843);const ot=[{name:"faq.bestMatch",description:"Text shown before the list of opening hours"},{name:"faq.sorryNotFound1",description:"Answer when no support articles were found (first version)"},{name:"faq.sorryNotFound2",description:"Answer when no support articles were found (second version)"},{name:"faq.sorryNotFound3",description:"Answer when no support articles were found (third version)"},{name:"faq.askSomething1",description:"What the chatbot answer when the user requests help (first version)"},{name:"faq.askSomething2",description:"What the chatbot answer when the user requests help (second version)"},{name:"faq.askSomething3",description:"What the chatbot answer when the user requests help (third version)"},{name:"faq.no"},{name:"faq.yes"},{name:"faq.ok"},{name:"faq.wasUseful",description:"Asked if an article is useful after a search"},{name:"faq.thanksBye1",description:"Answer when the user is satisfied with the found article (first version)"},{name:"faq.thanksBye2",description:"Answer when the user is satisfied with the found article (second version)"},{name:"faq.thanksBye3",description:"Answer when the user is satisfied with the found article (third version)"},{name:"faq.selectOneOfThese",description:"Shown when the user is asked to select on of the related articles of a search"},{name:"faq.somethingWentWrong",description:"Shown when an unrecoverable error occurs"},{name:"faq.noMoreArticles",description:"Shown when user ask to more results but there aren't"}],{Contents:it,Categories:ct}=rt.VY,{NodeRedNode:ut,SlugHelp:mt,TypeCommand:dt,ChatbotStatus:pt}=rt.AK;(0,r.plug)("sidebar",null,{id:"knowledgebase",label:"Knowledge Base",url:"/knowledge-base",icon:"file-text",permission:"faq.edit",options:[{label:"Articles",url:"/knowledge-base",id:"faqs"},{label:"Categories",url:"/knowledge-base/categories",id:"faqs-categories"}]}),(0,r.plug)("sidebar",null,{id:"knowledgebase",label:"Knowledge Base",url:"/knowledge-base",icon:"file-text",permission:["faq.configure","configure"],options:[{label:"Configuration",url:"/knowledge-base/configure",id:"faqs-configure"}]}),(0,r.plug)("pages",ct,{url:"/knowledge-base/categories",title:"Categories",id:"faq-categories",permission:"faq.edit",namespace:"faq",breadcrumbs:[{title:"Knowledge Base",url:"/knowledge-base"},"Categories"]}),(0,r.plug)("pages",(0,rt.ln)("knowledge-base",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,s]=(0,a.useState)(e),[o,i]=(0,a.useState)(null),[c,u]=(0,a.useState)("openings"),m=(0,a.useRef)(null);return l().createElement("div",null,l().createElement(K.Z,{appearance:"tabs",activeKey:c,onSelect:u,style:{marginBottom:"25px"}},l().createElement(K.Z.Item,{eventKey:"openings"},"Knowledge Base"),l().createElement(K.Z.Item,{eventKey:"translations"},"Translations")),l().createElement(P.Z,{disabled:!0,formValue:r,formError:o,ref:m,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),i(null)},onCheck:e=>{i(e)}},"translations"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(L.Z,{name:"translations",accepter:rt.Xy,schema:ot,disabled:n}))),"openings"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(D.Z,null,"Answer by Default"),l().createElement(L.Z,{name:"answerByDefault",accepter:st.Z,disabled:n}),l().createElement($.Z,null,"With this option ",l().createElement("em",null,"enabled"),", the block execute a search for every input of the user, if ",l().createElement("em",null,"disabled")," the user has to enter in the ",l().createElement("em",null,"ask question state")," entering some sentences like ",l().createElement("em",null,'"I need help"'))),l().createElement(V.Z,null,l().createElement(D.Z,null,"Articles Sensitivity"),l().createElement(L.Z,{disabled:n,name:"threshold",accepter:rt.nH}),l().createElement($.Z,null,"The minimum score of an article to be considered relevant. Lower this value if the search doesn't return any value.")),l().createElement(V.Z,null,l().createElement(D.Z,null,"NLP Sensitivity"),l().createElement(L.Z,{disabled:n,name:"nlpThreshold",accepter:rt.nH}),l().createElement($.Z,null,"The minimum score of an intent to be considered relevant. Lower this value if the NLP doesn't catch any intent of the user input, raise this value if the NLP of this block is interfering with the NLP of other blocks.")),l().createElement(V.Z,null,l().createElement(D.Z,null,"Suggest Articles"),l().createElement(L.Z,{disabled:n,name:"articlesToSuggest",accepter:rt.zs,min:1,max:20,style:{maxWidth:"200px"},postfix:l().createElement("span",null," articles")}),l().createElement($.Z,null,'The maximum articles to suggest if user clicks on "More articles"'))),l().createElement(V.Z,{style:{marginTop:"40px"}},l().createElement(U.Z,null,l().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{m.current.check()&&t(r)}},"Save configuration"),l().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>{const{sendMessage:e}=(0,Ke.ZP)();return l().createElement("div",null,l().createElement(ut,null,"Knowledge Base"),l().createElement("p",null,"Configure the ",l().createElement("b",null,"Knowledge Base")," block, use the ",l().createElement("b",null,"Articles")," section to enter the knowledge base of your product or service.",l().createElement("br",null),"For articles that represent the same content but in different languages, use the same ",l().createElement("em",null,"slug"),", the block will take care of the rest."),l().createElement("p",null,"Adjust the sensitivity of the search engine, raise it when the results are not relevant to the user's question, lower it when the search is not returning anything, keep an eye on the system console to see the score of the searches.",l().createElement("br",null),"With ",l().createElement("b",null,"Answer by Default")," the block can answer automatically to any input text message or can start answering only when the chatbot in ",l().createElement(pt,null,"faq.answer")," status, which is entered when the user types senteces like ",l().createElement(dt,null,"I need help"),"."),l().createElement(mt,null),l().createElement("div",{style:{textAlign:"center",marginTop:"10px"}},l().createElement(h.Z,{appearance:"primary",onClick:()=>{e("faq.refresh"),lt.Z.success({title:"Knowledge Base",description:"Re-index of articles started"})}},"Refresh index")))},title:"Knowledge Base"}),{url:"/knowledge-base/configure",title:"Configure",id:"faqs-configure",permission:["faq.configure","configure"]}),(0,r.plug)("pages",it,{url:"/knowledge-base",title:"Knowledge Base",id:"faqs",namespace:"faq",permission:"faq.edit",breadcrumbs:["Knowledge Base","Articles"],labels:{saveContent:"Save article",createContent:"Create article"}}),(0,r.plug)("permissions",null,{permission:"faq.edit",name:"Edit Kwnowledge base",description:"Add and edit articles of the knowledge base",group:"Knowledge Base"}),(0,r.plug)("permissions",null,{permission:"faq.configure",name:"Configure Kwnowledge base",description:"Configure Kwnowledge base",group:"Knowledge Base"});var gt=n(63609),ht=n(72753);const{StringType:ft,ArrayType:yt,ObjectType:Et,DateType:bt}=ht.Z.Types,vt=ht.Z.Model({openings:yt().of(Et().shape({start:bt().isRequired("Specify starting hour"),end:bt().isRequired("Specify ending hour"),range:ft().isRequired("Select a range for opening hours")})).addRule(e=>d().isArray(e)&&0!==e.length,"Specify at least an opening hour")}),wt=[{key:"url",type:"string",description:"The url opened clicking on the card button",defaultValue:"http://",color:"red"},{key:"labelButton",type:"string",description:"The label of the card button",defaultValue:"Open",color:"orange"}],Zt=({value:e,onChange:t,disabled:n=!1})=>l().createElement("div",null,l().createElement(J.Z,{disabled:n,useSlug:!0,canCreate:!0,value:e.slug,customFieldsSchema:wt,fluid:!0,onChange:n=>t({...e,slug:n})}));Zt.propTypes={value:i().shape({slug:i().string}),onChange:i().func,disabled:i().bool};const xt=Zt,kt=[{name:"carousel.intro",description:"Introduction text of the carousel"}];(0,r.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"carousel",label:"Carousel",url:"/configuration-carousel"}]}),(0,r.plug)("pages",(0,s.Z)("carousel",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,s]=(0,a.useState)(e),[o,i]=(0,a.useState)(null),[c,u]=(0,a.useState)("carousel"),m=(0,a.useRef)(null);return l().createElement("div",null,l().createElement(K.Z,{appearance:"tabs",activeKey:c,onSelect:u,style:{marginBottom:"25px"}},l().createElement(K.Z.Item,{eventKey:"carousel"},"Carousel"),l().createElement(K.Z.Item,{eventKey:"translations"},"Translations")),l().createElement(P.Z,{model:vt,disabled:!0,formValue:r,formError:o,ref:m,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),i(null)},onCheck:e=>{i(e)}},"translations"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(L.Z,{name:"translations",accepter:W.Z,schema:kt,disabled:n}))),"carousel"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(D.Z,null,"Carousel Cards",l().createElement($.Z,{tooltip:!0},"Select one or more content")),l().createElement(L.Z,{name:"cards",accepter:ge.Z,form:xt,labelAdd:"Add card",disabled:n}))),l().createElement(V.Z,{style:{marginTop:"40px"}},l().createElement(U.Z,null,l().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{m.current.check()&&t(r)}},"Save configuration"),l().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>l().createElement("div",null,l().createElement(gt.NodeRedNode,null,"Cards"),l().createElement("p",null,"Configure the carousel of cards to show in the chabot: select one or more ",l().createElement("em",null,"slugs")," from the ",l().createElement("strong",null,"Content")," section."),l().createElement(gt.SlugHelp,null)),title:"Carousel"}),{permission:"configure",url:"/configuration-carousel",title:"Carousel",id:"configuration-carousel"});const Ct=({formValue:e={},formError:t=null,onChange:n})=>(e=e||{},l().createElement(P.Z,{formValue:e,formError:t,onChange:n,fluid:!0,autoComplete:"off"},l().createElement(V.Z,null,l().createElement(D.Z,null,"Authorized"),l().createElement(st.Z,{onChange:t=>n({...e,authorized:t,suspended:!t&&e.suspended}),checked:e.authorized}),l().createElement($.Z,null,"Only authorized users can access private chatbot")),l().createElement(V.Z,null,l().createElement(D.Z,null,"Suspend"),l().createElement(st.Z,{onChange:t=>n({...e,suspended:t,authorized:!t&&e.authorized}),checked:e.suspended}),l().createElement($.Z,null,"Suspended user cannot access a public chatbot"))));function St(){return(St=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const qt=[{name:"authorization.notAuthorized",description:"Shown when the user is not authorized in a private chatbot"},{name:"authorization.suspended",description:"Shown when the user is suspeded in a public chatbot"},{name:"authorization.userNotFound",description:"Shown when the user is not found on the local db, something went wrong"}],Tt=e=>({value:t,...n})=>l().createElement(e,St({checked:t},n)),{NodeRedNode:Nt,SlugHelp:It,TypeCommand:Rt}=rt.AK;(0,r.plug)("user-tabs",Ct,{id:"suspend-user",label:"Access",permission:"users.authorize"});(0,r.plug)("sidebar",null,{permission:"configure",id:"configuration",label:"Configuration",icon:"cog",options:[{id:"authorization",label:"Bot Access",url:"/authorization"}]}),(0,r.plug)("pages",(0,rt.ln)("authorization",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,s]=(0,a.useState)(e),[o,i]=(0,a.useState)(null),[c,u]=(0,a.useState)("access"),m=(0,a.useRef)(null);return l().createElement("div",null,l().createElement(K.Z,{appearance:"tabs",activeKey:c,onSelect:u,style:{marginBottom:"25px"}},l().createElement(K.Z.Item,{eventKey:"access"},"Access"),l().createElement(K.Z.Item,{eventKey:"translations"},"Translations")),l().createElement(P.Z,{disabled:!0,formValue:r,formError:o,ref:m,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),i(null)},onCheck:e=>{i(e)}},"translations"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(L.Z,{name:"translations",accepter:rt.Xy,schema:qt,disabled:n}))),"access"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(D.Z,null,"Private"),l().createElement(L.Z,{name:"private",accepter:Tt(st.Z),disabled:n}),l().createElement($.Z,null,"In a private chatbot, only authorized user can access"))),l().createElement(V.Z,{style:{marginTop:"40px"}},l().createElement(U.Z,null,l().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{m.current.check()&&t(r)}},"Save configuration"),l().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>l().createElement("div",null,l().createElement(Nt,null,"Authorization"),l().createElement("p",null,"Set the chatbot private, only authorized user will be able to use the chatbot. Set the authorization in the users section."),l().createElement("p",null,"For public chatbot it's possibile to suspend a user.")),title:"Bot Access"}),{permission:"configure",url:"/authorization",title:"Welcome Message",id:"page-authorization"}),(0,r.plug)("permissions",null,{permission:"users.authorize",name:"Authorize/Suspend",description:"Authorize or suspend a user",group:"Users"});var At=n(14774);const Ot=e=>d().isEmpty(e.first_name)&&d().isEmpty(e.last_name)?d().isEmpty(username)?"Anonymous (id: {id})":e.username:[e.first_name,e.last_name].filter(e=>!d().isEmpty(e)).join(" "),jt=({value:e,validation:t,onChange:n=(()=>{}),onSubmit:a=(()=>{})})=>{const{activeChatbots:r}=(0,At.Z)();return l().createElement("div",null,l().createElement(P.Z,{fluid:!0,formValue:e,onChange:n,formError:t},l().createElement(He.Z,{justify:"space-between"},l().createElement(He.Z.Item,{colspan:15},l().createElement(V.Z,null,l().createElement(D.Z,null,"Recipient"),l().createElement(L.Z,{name:"recipient",accepter:rt.P2,cleanable:!0,onChange:t=>{if(null!=t&&_.isArray(t.chatIds)&&!_.isEmpty(t.chatIds)){const a=t.chatIds.find(e=>((e,t)=>e.some(e=>e.transport===t))(r,e.transport));null!=a&&n({...e,chatId:a.chatId,recipient:t,botNode:r.find(e=>e.transport===a.transport).nodeId})}}}))),l().createElement(He.Z.Item,{colspan:8},l().createElement(V.Z,null,l().createElement(D.Z,null,"Transport",l().createElement($.Z,{tooltip:!0},"Shows only platforms for which the selected users has a valid ",l().createElement("em",null,"chatId"))),l().createElement(L.Z,{name:"botNode",accepter:rt.Tl,transports:null!=e.recipient?e.recipient.chatIds.map(e=>e.transport):null,disabled:null==e.recipient,onChange:t=>{const a=r.find(e=>e.nodeId===t);if(null!=a&&null!=e.recipient){const l=e.recipient.chatIds.find(e=>e.transport===a.transport);null!=l&&n({...e,chatId:l.chatId,botNode:t})}},block:!0})))),l().createElement(V.Z,{style:{marginTop:"15px"}},l().createElement(D.Z,null,"Message to send"),l().createElement(L.Z,{name:"message",componentClass:"textarea",style:{height:"100%"},onKeyUp:e=>{e.shiftKey&&13===e.keyCode&&a()}}))))},{useModal:zt}=rt.u_,_t=e=>null!=e.recipient&&null!=e.chatId&&null!=e.botNode&&!d().isEmpty(e.message),{StringType:Bt,ObjectType:Mt}=ht.Z.Types,Ft=(ht.Z.Model({recipient:Mt().isRequired("Select recipient"),botNode:Bt().isRequired("Select chatbot platoform"),message:Bt().isRequired("Enter message for the user")}),({user:e,appearance:t="ghost",transport:n})=>{const{sendToInput:a}=(0,Ke.ZP)(),{activeChatbots:r}=(0,At.Z)(),{open:s,close:o,validate:i,error:c,disable:u,openWithModel:m,openWith:p}=zt({view:jt,title:"Send message",labelSubmit:"Send message",size:"sm"});let g,f;if(!d().isEmpty(n)){if(e.chatIds.some(e=>e.transport===n)){const t=r.find(e=>e.transport===n);console.log("chatBot",t,r,n),null!=t&&(g=t.nodeId,f=e.chatIds.find(e=>e.transport===n).chatId)}}return l().createElement(h.Z,{appearance:t,onClick:async()=>{let t={recipient:e,botNode:g,chatId:f,message:""};t=await p(t,_t),t&&(a("message.send",t),lt.Z.success({title:"Message sent",description:`Message sent successfully to "${Ot(t.recipient)}"`}))}},"Contact User")});n(73470);const{WidgetForm:Kt,Content:Pt,Footer:Vt}=rt.DD;(0,r.plug)("widgets",({stats:e})=>{const[t,n]=(0,a.useState)({message:""}),r=!_.isEmpty(t.chatId)&&!_.isEmpty(t.botNode),{sendToInput:s}=(0,Ke.ZP)();return l().createElement(rt.s_,{title:"Send Message",className:"widget-send-message"},l().createElement(Kt,{fluid:!0,formValue:t,onChange:e=>n(e)},l().createElement(Pt,null,l().createElement(jt,{value:t,onChange:e=>n(e),onSubmit:()=>{s("message.send",t),n({...t,message:""})}})),l().createElement(Vt,null,l().createElement(V.Z,null,l().createElement(U.Z,null,l().createElement(h.Z,{appearance:"primary",disabled:!r,onClick:()=>{s("message.send",t),n({...t,message:""})}},"Send Message"),l().createElement("div",{className:"key-hint"},"Shift + Enter to Send"),l().createElement(h.Z,{style:{float:"right"},appearance:"default",onClick:()=>n({botNode:null,recipient:null,chatId:null,message:""})},"Cancel"))))))},{x:0,y:0,w:2,h:6,isResizable:!0,id:1}),(0,r.plug)("user-button",Ft),(0,r.plug)("user-record-buttons",({record:e})=>l().createElement(Ft,{transport:e.transport,appearance:"primary",user:e.user}),{type:"survey"});var Lt=n(15593),Dt=n.n(Lt),Ht=n(38631);const $t=u()`
query {
  contents(namespace: "plugins") {
    id,
    title,
    body,
    payload,
    fields {
      name,
      value
    }
  }
}
`,Ut=()=>{const e=(0,S.xJ)(),{data:t}=(0,Ht.Z)({namespace:"market-place"}),[n,r]=(0,a.useState)(null),{put:s}=Dt()("https://api.jsonbin.io",{headers:{"Content-Type":"application/json","secret-key":null!=t?t.jsonbin_key:null,versioning:"false"}}),o=null!=t&&!d().isEmpty(t.jsonbin_key);return l().createElement(h.Z,{disabled:null!=n||!o,appearance:"primary",onClick:async()=>{r("Loading...");const n=(await e.query({query:$t,fetchPolicy:"network-only"})).data.contents.map(e=>{const t=e.fields.reduce((e,t)=>({...e,[t.name]:t.value}),{});let n=null;return d().isEmpty(t.content_title)&&d().isEmpty(t.content_slug)&&d().isEmpty(t.content_body)||(n={title:t.content_title,slug:t.content_slug,body:t.content_body,namespace:t.content_namespace}),{id:t.id,name:e.title,description:e.body,url:t.url,flow:t.flow,version:t.version,github:t.github,keywords:t.tags,author:{name:t.author,url:t.author_url},content:n,initialConfiguration:null==e.payload||d().isEmpty(e.payload.initial_configuration)?null:e.payload.initial_configuration}});r("Publishing..."),await s("/b/"+t.jsonbin_id,n),r(null),lt.Z.success({title:"Published",description:"Plugin list published succesfully "})}},null!=n?n:"Publish plugins")},Wt=({formValue:e={},onChange:t=(()=>{})})=>{const{initial_configuration:n}=e||{};return l().createElement("div",{style:{paddingBottom:"15px"}},l().createElement(rt.Ad,{value:d().isEmpty(n)?"":n,height:"55vh",onChange:n=>{t({...e,initial_configuration:d().isEmpty(n)?null:n})}}))};(0,r.plug)("sidebar",null,{id:"market-place",label:"Market Place",url:"/market-place",icon:"shopping-basket"}),(0,r.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"configuration-market-place",label:"Market Place",url:"/configuration-market-place"}]}),(0,r.plug)("pages",(0,rt.ln)("market-place",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,s]=(0,a.useState)(e),[o,i]=(0,a.useState)(null),c=(0,a.useRef)(null);return l().createElement("div",null,l().createElement(P.Z,{formValue:r,formError:o,ref:c,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),i(null)},onCheck:e=>{i(e)}},l().createElement(V.Z,null,l().createElement(D.Z,null,"JSONbin.io id"),l().createElement(L.Z,{name:"jsonbin_id",accepter:H.Z,disabled:n}),l().createElement($.Z,null,"The ",l().createElement("em",null,"id")," of the ",l().createElement("strong",null,"jsonbin.io")," snippet of the plugins meta info")),l().createElement(V.Z,null,l().createElement(D.Z,null,"JSONbin.io key"),l().createElement(L.Z,{name:"jsonbin_key",accepter:H.Z,disabled:n}),l().createElement($.Z,null,"The ",l().createElement("em",null,"secret key")," to write on ",l().createElement("strong",null,"jsonbin.io"))),l().createElement(V.Z,{style:{marginTop:"40px"}},l().createElement(U.Z,null,l().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{c.current.check()&&t(r)}},"Save configuration"),l().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>l().createElement("div",null,"Configure the id and the key to access ",l().createElement("strong",null,"jsonbing.io")," for the plugins met information.",l().createElement("br",null),"Docs about the API ",l().createElement("a",{href:"https://jsonbin.io/api-reference/bins/read",target:"blank"},"here"),"."),title:"Market Place"}),{permission:"configure",url:"/configuration-market-place",title:"Market Place",id:"configuration"}),(0,r.plug)("pages",rt.VY.Contents,{url:"/market-place",title:"Market Place",id:"market-place",namespace:"plugins",breadcrumbs:["Market Place","Plugins"],labels:{saveContent:"Save plugin",createContent:"Create plugin",emptyContent:"No plugins"},custom:()=>l().createElement(Ut,null),customFieldsSchema:[{key:"url",type:"string",description:"URL of the compiled plugin",color:"cyan"},{key:"flow",type:"string",description:"URL of the Node-RED flow for this plugin",color:"cyan"},{key:"id",type:"string",description:"Unique id of the plugin",color:"red"},{key:"version",type:"string",description:"The version of the current (latest) plugin",color:"red"},{key:"github",type:"string",description:"The URL of the github page of the plugin",color:"red"},{key:"author",type:"string",description:"The username of the author of the plugin",color:"orange"},{key:"author_url",type:"string",description:"The home page of the username, if any",color:"orange"},{key:"tags",type:"tags",description:"List of keywords, comma separated",color:"red"},{key:"content_title",type:"string",description:"Create a content with this title",color:"violet"},{key:"content_slug",type:"string",description:"Create a content with this slug",color:"violet"},{key:"content_body",type:"string",description:"Create a content with this body",color:"violet"},{key:"content_namespace",type:"string",description:"Create a content with this namespace",color:"violet"}]}),(0,r.plug)("content-tabs",Wt,{id:"content-configuration",label:"Configuration",namespace:["plugins"]});const{StringType:Jt,ArrayType:Qt,ObjectType:Xt,DateType:Gt}=ht.Z.Types,Yt=ht.Z.Model({commands:Qt().of(Xt().shape({command:Jt().isRequired("Specify the command").addRule(e=>e.startsWith("/"),'Command should start with "/"'),slug:Jt().isRequired("Specifig a slug (shortcut) for a content")})).addRule(e=>{const t=e.map(e=>e.command);return d().uniq(t).length===t.length},"Some contents have the same command")}),en=({value:e,onChange:t,disabled:n=!1})=>l().createElement(He.Z,{justify:"space-between"},l().createElement(He.Z.Item,{colspan:8},l().createElement(H.Z,{value:e.command,placeholder:"/command",onChange:n=>t({...e,command:n})})),l().createElement(He.Z.Item,{colspan:15},l().createElement(rt.MN,{disabled:n,useSlug:!0,canCreate:!0,value:e.slug,fluid:!0,onChange:n=>t({...e,slug:n})})));en.propTypes={value:i().shape({slug:i().string,command:i().string}),onChange:i().func,disabled:i().bool};const tn=en,{NodeRedNode:nn,SlugHelp:an,TypeCommand:ln}=rt.AK;(0,r.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"commands",label:"Commands",url:"/configuration-commands"}]}),(0,r.plug)("pages",(0,rt.ln)("commands",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,s]=(0,a.useState)(e),[o,i]=(0,a.useState)(null),c=(0,a.useRef)(null);return l().createElement("div",null,l().createElement(P.Z,{model:Yt,disabled:!0,formValue:r,formError:o,ref:c,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),i(null)},onCheck:e=>{i(e)}},l().createElement(V.Z,null,l().createElement(D.Z,null,"Content Commands",l().createElement($.Z,{tooltip:!0},"Select one or more content to be shown after a command-line message (like ",l().createElement("em",null,"/privacy"),", etc)")),l().createElement(L.Z,{name:"commands",accepter:rt.JX,form:tn,labelAdd:"Add command",disabled:n,sortable:!1})),l().createElement(V.Z,{style:{marginTop:"40px"}},l().createElement(U.Z,null,l().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{c.current.check()&&t(r)}},"Save configuration"),l().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>l().createElement("div",null,l().createElement(nn,null,"Commands"),l().createElement("p",null,"Use the this node to show some contents in response of some command-like messages from users, this is a perfect place to put some statics documents for pricacy or tos (for example ",l().createElement(ln,null,"/privacy")," or ",l().createElement(ln,null,"/terms"),")."),l().createElement(an,null)),title:"Commands"}),{permission:"configure",url:"/configuration-commands",title:"Commands",id:"configuration-commands"});const{NodeRedNode:rn,SlugHelp:sn,TypeCommand:on}=rt.AK;(0,r.plug)("sidebar",null,{permission:"configure",id:"configuration",label:"Configuration",icon:"cog",options:[{id:"welcome-message",label:"Welcome Message",url:"/welcome"}]}),(0,r.plug)("pages",(0,rt.ln)("survey",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,s]=(0,a.useState)(e),[o,i]=(0,a.useState)(null),c=(0,a.useRef)(null);return l().createElement("div",null,l().createElement(P.Z,{disabled:!0,formValue:r,formError:o,ref:c,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),i(null)},onCheck:e=>{i(e)}},l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(D.Z,null,"Welcome message",l().createElement($.Z,{tooltip:!0},"Select the content to show when the user joins the chatbot")),l().createElement(L.Z,{name:"page",accepter:rt.MN,useSlug:!0,disabled:n}))),l().createElement(V.Z,{style:{marginTop:"40px"}},l().createElement(U.Z,null,l().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{c.current.check()&&t(r)}},"Save configuration"),l().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>l().createElement("div",null,l().createElement(rn,null,"New User"),l().createElement("p",null,"Select the message to show when a new user joins the chatbot by selecting a ",l().createElement("em",null,"slug")," from the ",l().createElement("strong",null,"Content")," section."),l().createElement(sn,null),l().createElement("p",null,"To test message type ",l().createElement(on,null,"/start")," in the chatbot")),title:"Welcome message"}),{permission:"configure",url:"/welcome",title:"Welcome Message",id:"page-welcome-message"});const{StringType:cn,ArrayType:un,ObjectType:mn,DateType:dn}=ht.Z.Types,pn=ht.Z.Model({openings:un().of(mn().shape({start:dn().isRequired("Specify starting hour"),end:dn().isRequired("Specify ending hour"),range:cn().isRequired("Select a range for opening hours")})).addRule(e=>d().isArray(e)&&0!==e.length,"Specify at least an opening hour")});var gn=n(77147);const hn=[{value:"mo",label:"Monday"},{value:"tu",label:"Tuesday"},{value:"we",label:"Wednesday"},{value:"th",label:"Thursday"},{value:"fr",label:"Friday"},{value:"sa",label:"Saturday"},{value:"su",label:"Sunday"},{value:"mo-fr",label:"Monday - Friday"},{value:"mo-sa",label:"Monday - Saturday"},{value:"mo-su",label:"Monday - Sunday"},{value:"sa-su",label:"Saturday - Sunday"}];var fn=n(88849);const yn=e=>{const t=new Date(e);return(0,fn.Z)(t)?t:null},En=({value:e,onChange:t,disabled:n=!1})=>l().createElement("div",null,l().createElement(He.Z,{justify:"space-between"},l().createElement(He.Z.Item,{colspan:7},l().createElement(gn.Z,{readOnly:n,format:"HH:mm",value:yn(e.start),style:{width:"100%"},onChange:n=>t({...e,start:n})})),l().createElement(He.Z.Item,{colspan:7},l().createElement(gn.Z,{readOnly:n,value:yn(e.end),format:"HH:mm",style:{width:"100%"},onChange:n=>t({...e,end:n})})),l().createElement(He.Z.Item,{colspan:8},l().createElement(g.Z,{readOnly:n,format:"HH:mm",block:!0,value:e.range,data:hn,style:{width:"100%"},onChange:n=>t({...e,range:n})}))));En.propTypes={value:i().shape({start:i().string,end:i().string,range:i().oneOf(["mo","tu","we","th","fr","sa","su","mo-fr","mo-sa","mo-su","sa-su"])})};const bn=En,vn=[{name:"openings.openWhen",description:"Text shown before the list of opening hours"},{name:"openings.monday"},{name:"openings.tuesday"},{name:"openings.wednesday"},{name:"openings.thursday"},{name:"openings.friday"},{name:"openings.saturday"},{name:"openings.sunday"},{name:"openings.monfri"},{name:"openings.monsat"},{name:"openings.monsun"},{name:"openings.satsun"},{name:"openings.yes"},{name:"openings.no"}],{NodeRedNode:wn,SlugHelp:Zn,TypeCommand:xn}=rt.AK;(0,r.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"configuration-hours",label:"Opening hours",url:"/configuration-openings"}]}),(0,r.plug)("pages",(0,rt.ln)("shop-openings",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,s]=(0,a.useState)(e),[o,i]=(0,a.useState)(null),[c,u]=(0,a.useState)("openings"),m=(0,a.useRef)(null);return l().createElement("div",null,l().createElement(K.Z,{appearance:"tabs",activeKey:c,onSelect:u,style:{marginBottom:"25px"}},l().createElement(K.Z.Item,{eventKey:"openings"},"Openings"),l().createElement(K.Z.Item,{eventKey:"translations"},"Translations")),l().createElement(P.Z,{model:pn,disabled:!0,formValue:r,formError:o,ref:m,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),i(null)},onCheck:e=>{i(e)}},"translations"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(L.Z,{name:"translations",accepter:rt.Xy,schema:vn,disabled:n}))),"openings"===c&&l().createElement(a.Fragment,null,l().createElement(V.Z,null,l().createElement(D.Z,null,"Openings hours"),l().createElement(L.Z,{name:"openings",accepter:rt.JX,form:bn,labelAdd:"Add opening hour",disabled:n})),l().createElement(V.Z,null,l().createElement(D.Z,null,"Content"),l().createElement(L.Z,{useSlug:!0,readOnly:n,name:"content",accepter:rt.MN}),l().createElement($.Z,null,"Select a ",l().createElement("em",null,"slug")," for a multi-language content to show additional information when a user requests information about opening hours")),l().createElement(V.Z,null,l().createElement(D.Z,null,"Sensitivity"),l().createElement(L.Z,{disabled:n,name:"threshold",accepter:rt.nH}),l().createElement($.Z,null,"The minimum score of an intent to be considered relevant. Lower this value if the NLP doesn't catch any intent of the user input, raise this value if the NLP of this block is interfering with the NLP of other blocks."))),l().createElement(V.Z,{style:{marginTop:"40px"}},l().createElement(U.Z,null,l().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{m.current.check()&&t(r)}},"Save configuration"),l().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>l().createElement("div",null,l().createElement(wn,null,"Opening Hours node"),l().createElement("p",null,"Configure the behaviour of this node: customize the opening hours and and some additional content (for example to show extra openings, etc)."),l().createElement(Zn,null)),title:"Opening Hours"}),{permission:"configure",url:"/configuration-openings",title:"Opening Hours",id:"configuration"});n(64610);const kn=({channel:e,path:t,value:n,device:a,digits:r=1})=>{console.log("path",t,"value",n,"channel",e,"digits",r);const s=(e=>{let t=-1!==e.indexOf("digital");const n=e.match(/\[([0-9])*\]/),a=null!=n?parseInt(n[1],10):"";return"#IN"+(t?"D":"A")+"."+(a<10?"0"+a:a)+" Input"+(t?" Digital":" Analogico")})(t);return l().createElement("div",{className:"channel-remoto"},l().createElement("div",{className:"meta"},l().createElement("div",{className:"top"},l().createElement("div",{className:"info"},l().createElement("div",{className:"name"},e.name),l().createElement("div",{className:"status"},"Status ",l().createElement(y.Z,{style:{color:"#FF4C28"},icon:"circle"}))),l().createElement("div",{className:"current-value"},null!=n&&l().createElement("span",{className:"figure"},Number(n.val).toFixed(r)),null!=n&&null!=e&&null!=e.unit&&l().createElement("span",{className:"unit"},e.unit))),l().createElement("div",{className:"bottom"},l().createElement(rt.vx,{color:"#69bb0b"},s),"4-20 mA"===e.type&&l().createElement(rt.vx,{color:"#69bb0b"},"4-20 mA"),e.alarm&&l().createElement(rt.vx,{color:"#69bb0b"},l().createElement(y.Z,{icon:"bell"})),!e.alarm&&l().createElement(rt.vx,{color:"#69bb0b"},l().createElement(y.Z,{icon:"bell-slash"})))),l().createElement("div",{className:"graph"},"the graph"),l().createElement("div",{className:"buttons"},l().createElement(rt.kr,{path:t,jsonSchema:a.jsonSchema,value:a,tooltip:"Edit "+s,title:s,placement:"left",skipValidation:!0})))};(0,r.plug)("device-header",({device:e})=>l().createElement("span",null,"255.255.255.255"),{label:"IP",id:"device-A"}),(0,r.plug)("device-header",({device:e})=>l().createElement("span",null,e.payload.network.apn.name),{label:"Provider",edit:"/network/apn",id:"device-B",tooltip:"Edit network params"}),(0,r.plug)("device-channel",kn)},3018:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".channel-remoto{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:flex-start;align-items:flex-start;height:100px;border:1px solid #cccccc;border-radius:3px;margin-bottom:10px}.channel-remoto .rs-icon-bell,.channel-remoto .rs-icon-bell-slash{font-size:11px}.channel-remoto .rs-tag+.rs-tag{margin-left:5px}.channel-remoto .meta{flex:0 0 350px;height:100px;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.channel-remoto .meta .top{flex:1 0;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:flex-start;align-items:flex-start}.channel-remoto .meta .top .info{flex:1 0;padding:5px}.channel-remoto .meta .top .info .name{font-weight:bold}.channel-remoto .meta .top .current-value{flex:0 0 auto;margin-right:8px}.channel-remoto .meta .top .current-value .figure{font-weight:bold;font-size:26px;color:#666666;text-align:center;margin-top:10px;display:inline-block}.channel-remoto .meta .top .current-value .unit{font-weight:bold;color:#999999;font-size:16px;margin-left:4px;display:inline-block}.channel-remoto .meta .bottom{flex:0 0 20px;margin:0px 0px 5px 3px}.channel-remoto .graph{flex:1 0}.channel-remoto .buttons{flex:0 0 15px;margin-right:5px;margin-top:3px}\n",""])},47155:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".widget-send-message .rs-form-group{flex:1 0;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.widget-send-message .rs-form-group .rs-form-control-wrapper{flex:1 0}.widget-send-message .key-hint{color:#999999;display:inline-block}\n",""])},13794:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".simulator-transport-menu .rs-picker-subtle .rs-btn:focus,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle:focus,.simulator-transport-menu .rs-picker-subtle .rs-btn.rs-btn-focus,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle.rs-btn-focus,.simulator-transport-menu .rs-picker-subtle .rs-btn:hover,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle:hover{background-color:#ffffff}.simulator-transport-menu .rs-picker-toggle{margin-top:-5px}.chat-simulator .meta{display:inline-block;margin-right:5px}.chat-simulator .meta .user{display:inline-block;margin-right:5px;font-size:14px;font-weight:normal}.chat-simulator .ui-grid-panel-content{margin:-5px -10px -10px -10px}.chat-simulator .ui-chat-window{border-bottom-left-radius:4px;border-bottom-right-radius:4px}.picker-item-transport em{font-weight:normal;color:#777777;font-size:12px}.picker-item-transport b{color:#333333;font-size:13px}\n",""])},55221:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".survey-viewer{padding:20px}.survey-viewer .question{margin-top:15px}.survey-viewer .question:first-child{margin-top:0px}.survey-viewer .answer.multiple .placeholder{font-weight:bold}.survey-viewer .answer.multiple .choice.selected{font-weight:bold;color:#FF3C2B}\n",""])},31258:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".ui-badge-icon-tooltip{display:inline-block;background-color:#C9C9C9;padding:0px 5px;border-radius:2px;line-height:17px;margin-top:3px;margin-right:3px;height:18px}.ui-badge-icon-tooltip i{font-size:11px}.ui-badge-icon-tooltip .text{display:inline;margin-left:3px;font-size:12px}.ui-badge-icon-tooltip.orange{background-color:#FFB049;color:#000000}.ui-badge-icon-tooltip.red{background-color:#DB2323;color:#ffffff}\n",""])},43872:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".ui-survey-editor{margin-top:10px;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.ui-survey-editor .questions{order:0;flex:0 0 250px;align-self:auto;border:1px solid #dddddd}.rs-list-item{padding-top:0px;padding-bottom:0px}.ui-survey-question{display:block;height:80px;border-bottom:1px solid #eeeeee;background-color:#ffffff;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:center}.ui-survey-question .icons{display:inline-block;float:right}.ui-survey-question .grippy{content:'....';width:14px;overflow:hidden;height:80px;display:inline-block;overflow:hidden;line-height:5px;padding:3px 4px;cursor:move;vertical-align:middle;margin-top:-.7em;margin-right:.3em;font-size:12px;font-family:sans-serif;letter-spacing:2px;color:#cccccc;text-shadow:1px 0 1px #cccccc}.ui-survey-question .grippy::after{content:'.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..'}.ui-survey-question .grippy{flex:0 0 14px;height:75px}.ui-survey-question .indent{flex:0 0 4px;height:80px;background-color:#efefef}.ui-survey-question .content{flex:1 0;height:80px}.ui-survey-question .title{font-size:13px;color:#444444;display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;line-height:17px}.ui-survey-question .description{color:#999999;font-size:12px}.ui-survey-question:hover{text-decoration:none;background-color:#eeeeee}.ui-survey-question .selection-bar{width:4px;height:80px}.ui-survey-question.active .selection-bar{background-color:orange}.ui-survey-question.sorting{-webkit-box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75);-moz-box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75);box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75)}\n",""])},25730:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".ui-survey-editor .question-detail{order:0;flex:1 0 auto;align-self:auto;padding-left:10px}.ui-survey-editor .question-detail .title{margin-top:15px}.ui-survey-editor .question-detail .rs-btn-toolbar{margin-top:15px}.ui-survey-editor .question-detail .buttons{float:right}.ui-survey-editor .question-detail .buttons .rs-btn-toolbar{margin-top:0px}.ui-survey-editor .question-detail .configuration{margin-top:25px}\n",""])},46202:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".question-tag{display:inline-block;background-color:#333333;color:white;font-size:12px;border-radius:2px;padding:1px 3px;line-height:12px}.question-tag.large{font-weight:bold;border-radius:3px;height:35px;line-height:35px;vertical-align:middle;padding:0px 6px;font-size:22px}\n",""])},2477:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".ui-survey-editor-multiple-answer{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:center;align-items:center}.ui-survey-editor-multiple-answer .placeholder{flex:0 0 36px;border-radius:6px;display:inline-block;background-color:#F4FDCE;border:1px solid #BCE747;width:36px;height:36px;text-align:center;vertical-align:middle;line-height:36px;font-weight:bold;margin-right:10px}.ui-survey-editor-multiple-answer .answer{flex:1 0}.ui-survey-editor-multiple-answer .controls{flex:0 0 auto;text-align:left;margin-left:5px}\n",""])},64610:(e,t,n)=>{var a=n(3018);"string"==typeof a&&(a=[[e.id,a,""]]);var l={insert:"head",singleton:!1};n(93379)(a,l);a.locals&&(e.exports=a.locals)},73470:(e,t,n)=>{var a=n(47155);"string"==typeof a&&(a=[[e.id,a,""]]);var l={insert:"head",singleton:!1};n(93379)(a,l);a.locals&&(e.exports=a.locals)},87499:(e,t,n)=>{var a=n(13794);"string"==typeof a&&(a=[[e.id,a,""]]);var l={insert:"head",singleton:!1};n(93379)(a,l);a.locals&&(e.exports=a.locals)},70361:(e,t,n)=>{var a=n(55221);"string"==typeof a&&(a=[[e.id,a,""]]);var l={insert:"head",singleton:!1};n(93379)(a,l);a.locals&&(e.exports=a.locals)},81385:(e,t,n)=>{var a=n(31258);"string"==typeof a&&(a=[[e.id,a,""]]);var l={insert:"head",singleton:!1};n(93379)(a,l);a.locals&&(e.exports=a.locals)},83534:(e,t,n)=>{var a=n(43872);"string"==typeof a&&(a=[[e.id,a,""]]);var l={insert:"head",singleton:!1};n(93379)(a,l);a.locals&&(e.exports=a.locals)},7454:(e,t,n)=>{var a=n(25730);"string"==typeof a&&(a=[[e.id,a,""]]);var l={insert:"head",singleton:!1};n(93379)(a,l);a.locals&&(e.exports=a.locals)},34568:(e,t,n)=>{var a=n(46202);"string"==typeof a&&(a=[[e.id,a,""]]);var l={insert:"head",singleton:!1};n(93379)(a,l);a.locals&&(e.exports=a.locals)},89907:(e,t,n)=>{var a=n(2477);"string"==typeof a&&(a=[[e.id,a,""]]);var l={insert:"head",singleton:!1};n(93379)(a,l);a.locals&&(e.exports=a.locals)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,