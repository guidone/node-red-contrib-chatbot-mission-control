(window.webpackJsonpnode_red_contrib_chatbot_mission_control=window.webpackJsonpnode_red_contrib_chatbot_mission_control||[]).push([[568],{53568:(e,t,n)=>{"use strict";n.r(t);var a=n(67294),r=n.n(a),l=n(18985),s=n(80218),i=n(45697),o=n.n(i),c=n(44119),u=n.n(c),m=n(96486),d=n.n(m),p=n(73243),g=n(58971),h=n(29788),f=n(49762),b=n(53074),y=n(73727),E=n(30277),v=n(41567),x=n(1481),w=n(33092),Z=n(87103),k=n(15284),C=n(97604),S=n(18499);const q=u()`
mutation($id: Int!) {
  deleteRecord(id: $id) {
    id
  }
}`,{Column:N,HeaderCell:T,Cell:I}=p.Z,R=u()`
query($offset: Int, $limit: Int, $order: String, $type: String, $userId: String, $status: String) {
  counters {
    rows: records {
     count(type: $type, userId: $userId, status: $status)
    }
  }
  rows: records(offset: $offset, limit: $limit, order: $order, type: $type, userId: $userId, status: $status) {
    id,
    createdAt,
    title,
    payload,
    type,
    status,
    userId
  }
}
`,O=({type:e,title:t,breadcrumbs:n})=>{const s=(0,a.useRef)(),{props:i}=(0,l.useCodePlug)("user-record-types"),{error:o,saving:c,deleteRecord:u}=(({onCompleted:e=(()=>{})}={})=>{const[t,{loading:n,error:a}]=(0,S.Db)(q,{onCompleted:e});return{saving:n,error:a,deleteRecord:t}})(),m=i.find(t=>t.type===e),p=d().isArray(m.status)&&!d().isEmpty(m.status),O=[{name:"userId",label:"User",control:Z.P2,width:350}];return p&&O.push({name:"status",label:"Status",control:g.Z,data:m.status,searchable:!1}),r().createElement(E.Z,{className:"page-contents"},r().createElement(v.Z,{pages:null!=n?n:[t]}),null!=o&&r().createElement(C.Z,{error:o}),r().createElement(w.Z,{ref:s,query:R,variables:{type:e},initialSortField:"createdAt",initialSortDirection:"desc",toolbar:r().createElement(h.Z,{appearance:"primary",onClick:()=>s.current.refetch()},"Refetch"),filtersSchema:O,height:600,labels:{empty:"No "+m.list.toLowerCase()},autoHeight:!0},r().createElement(N,{width:60,align:"center"},r().createElement(T,null,"Id"),r().createElement(I,{dataKey:"id"})),r().createElement(N,{width:160,resizable:!0,sortable:!0},r().createElement(T,null,"Date"),r().createElement(I,{dataKey:"createdAt"},({createdAt:e})=>r().createElement(x.Z,{date:e}))),r().createElement(N,{width:100,resizable:!0},r().createElement(T,null,"userId"),r().createElement(I,null,({userId:e})=>r().createElement("span",{className:"cell-type-id"},e))),p&&r().createElement(N,{width:100,resizable:!0},r().createElement(T,null,"Status"),r().createElement(I,null,({status:e})=>r().createElement("span",null,e))),r().createElement(N,{flexGrow:1,align:"left",sortable:!0,resizable:!0},r().createElement(T,null,"Title"),r().createElement(I,null,({title:e,id:t})=>r().createElement(y.rU,{to:"/record/"+t},e))),r().createElement(N,{width:80},r().createElement(T,null,"Action"),r().createElement(I,null,e=>r().createElement(f.Z,null,r().createElement(h.Z,{disabled:c,size:"xs",onClick:async()=>{await(0,k.Z)(r().createElement("div",null,"Delete record ",r().createElement("em",null,'"',e.title,'"'),"?"),{okLabel:"Yes, delete"})&&(await u({variables:{id:e.id}}),s.current.refetch())}},r().createElement(b.Z,{icon:"trash"})))))))};O.propTypes={type:o().string,title:o().string,labels:o().shape({}),breadcrumbs:o().arrayOf(o().oneOfType([o().string,o().shape({title:o().string,url:o().string})]))};const j=O;var A=n(94184),M=n.n(A);n(70361);const B=({question:e})=>{switch(e.type){case"text":case"number":return r().createElement("div",{className:M()("answer",{[e.type]:!0})},e.answer);case"multiple":return r().createElement("div",{className:"answer multiple"},e.data.map((t,n)=>r().createElement("div",{className:M()("choice",{selected:t.answer===e.answer||t.value===e.answer})},r().createElement("span",{className:"placeholder"},"ABCDEFGHILMNOPQRTSUVZ"[n])," ",t.answer)))}};B.propTypes={question:o().shape({type:o().oneOf(["text","number","multiple","image"]),answer:o().string,data:o().oneOfType([o().string,o().shape({answer:o().string,value:o().string})])})};const F=({record:e})=>{const{payload:t}=e;return r().createElement("div",{className:"survey-viewer"},t.map(e=>r().createElement("div",{key:e.id,className:"question"},r().createElement("h5",null,e.title),r().createElement(B,{question:e}))))};F.propTypes={record:o().shape({question:o().shape({type:o().oneOf(["text","number","multiple","image"]),answer:o().string,data:o().oneOfType([o().string,o().shape({answer:o().string,value:o().string})])})})};const P=F;var V=n(65673),K=n(12760),z=n(80091),D=n(77410),L=n(20442),$=n(90631),H=n(2616),U=n(18964),W=n(11954),J=n(81442),G=n(18139),Q=(n(83534),n(40660)),X=n(51306);n(81385);const Y=({icon:e,text:t,tooltip:n,color:a})=>{const l=r().createElement("div",{className:M()("ui-badge-icon-tooltip",{[a]:!0})},r().createElement(b.Z,{icon:e}),null!=t&&r().createElement("span",{className:"text"},t));return null!=n?r().createElement(Q.Z,{trigger:"hover",placement:"top",speaker:r().createElement(X.Z,null,n)},l):l};Y.propTypes={color:o().oneOf(["red","orange"]),text:o().oneOfType([o().string,o().number]),icon:o().string,tooltip:o().string};const ee=Y;var te=n(89113);const ne=(e,t)=>e.find(e=>e.id===t.id),ae=(e,t)=>null!=t.parent?e.find(e=>e.id===t.parent):null,re=(e,t)=>e.some(e=>e.parent===t.id),le=e=>{const t={};return e.forEach(n=>{if(null!=n.parent&&null==t[n.parent]){const a=e.find(e=>e.id===n.parent);null!=a.parent?t[n.parent]=t[a.parent]+1:t[n.parent]=1}}),t},se=e=>{const t=le(e),n={root:0},a=t=>{if(null==t)return"";const r=null!=t.parent?e.find(e=>e.id===t.parent):null;return`${null!=r?a(r):""}${n[null!=r?r.id:"root"]}.`},r=t=>{const r=null!=t.parent?e.find(e=>e.id===t.parent):null;let l;return null!=r?null!=n[r.id]?(n[r.id]+=1,l=n[r.id]):(n[r.id]=1,l=1):(n.root+=1,l=n.root),`Q${a(r)}${l}`};return e.map(e=>({...e,tag:r(e),level:d().isEmpty(e.parent)?0:t[e.parent]}))},ie=r().createContext({});n(34568);const oe=({children:e,size:t="small"})=>r().createElement("div",{className:M()("question-tag",{[t]:!0})},e),ce=(0,G.JV)(()=>r().createElement("div",{className:"grippy"})),ue=({question:e,onSelect:t=(()=>{}),active:n=!1,level:l=null})=>{const{questions:s}=(0,a.useContext)(ie),i=(_.isArray(e.data)?e.data:[]).filter(e=>null!=e.jump).map(e=>{const t=s.find(t=>t.id===e.jump);if(null!=t)return r().createElement(ee,{key:t.tag,icon:"code-fork",text:t.tag,color:"orange",tooltip:`Jump to ${t.tag} if user selects "${e.answer}"`})});let o;if(null!=e.parent&&((e,t)=>{const n=e.findIndex(e=>e.id===t.id);return-1!==n&&0!==n&&t.parent===e[n-1].id})(s,e)){_(s).chain().filter(e=>"multiple"===e.type).map(e=>_.isArray(e.data)?e.data:[]).flatten().some(t=>t.jump===e.id).value()||(o=r().createElement(ee,{icon:"exclamation-triangle",key:"jump-warning",color:"red",tooltip:"No conditional jump to this question.\n        This is a nested question and can only be reached in the survey with a conditional answer in a multiple choice question"}))}return r().createElement("div",{className:M()("ui-survey-question",{active:n})},null!=l&&r().createElement("div",{className:"indent",style:{flex:`0 0 ${8*l}px`}}),r().createElement(ce,null),r().createElement("div",{className:"content",onClick:n=>{n.preventDefault(),t(e)}},r().createElement("div",{className:"meta"},r().createElement(oe,null,e.tag),r().createElement("div",{className:"icons"},i,o,"multiple"===e.type&&r().createElement(ee,{icon:"list",text:e.data.length,tooltip:"Multiple choice question"}),"text"===e.type&&r().createElement(ee,{icon:"font",tooltip:"Free text question"}),"number"===e.type&&r().createElement(ee,{icon:"percent",tooltip:"Numeric question"}),"image"===e.type&&r().createElement(ee,{icon:"image",tooltip:"Image   question"}))),r().createElement("div",{className:"title"},e.title)),r().createElement("div",{className:"selection-bar"}))};ue.propTypes={question:o().shape({id:o().string.isRequired,level:o().number,tag:o().string,title:o().string.isRequired,type:o().oneOf(["multiple","string","number","image"]).isRequired,data:o().oneOfType([o().arrayOf(o().shape({answer:o().string.isRequired,id:o().string.isRequired,jump:o().string,value:o().string}))])}),onSelect:o().func,active:o().bool,level:o().number};const me=(0,G.gU)(ue);var de=n(87883),pe=n(53348),ge=n(71368),he=n(73935),fe=n.n(he),be=n(62863);let ye=null;function Ee({okButtonText:e="Ok",onOk:t,showCancelButton:n=!0,cancelButtonText:l="Cancel",onCancel:s,children:i}){const[o,c]=(0,a.useState)(!0),u=(0,a.useCallback)(()=>{c(!1),t&&t()},[t]),m=(0,a.useCallback)(()=>{c(!1),s&&s()},[s]);return r().createElement(be.Z,{size:"sm",show:o},r().createElement(be.Z.Body,null,i),r().createElement(be.Z.Footer,null,n&&r().createElement(h.Z,{onClick:m},l),r().createElement(h.Z,{onClick:u,appearance:"primary"},e)))}const ve=(e,t,{okLabel:n="Ok",cancelLabel:a="Cancel"}={})=>{let l={...t};return new Promise(t=>{fe().render(r().createElement(Ee,{okButtonText:n,cancelButtonText:a,key:Date.now(),onOk:()=>t(l),onCancel:()=>t(null)},r().createElement(e,{formValue:l,onChange:e=>l=e})),(ye||(ye=document.createElement("div"),document.body.appendChild(ye)),ye))})};n(89907);const xe=({formValue:e,questions:t,onChange:n=(()=>{}),exclude:a})=>r().createElement("div",null,r().createElement(K.Z,{formDefaultValue:e,onChange:n,fluid:!0},r().createElement(z.Z,null,r().createElement(L.Z,null,"Jump To Question"),r().createElement(D.Z,{name:"jump",accepter:g.Z,block:!0,data:t.filter(e=>null==a||e.id!==a).map(e=>({value:e.id,label:e.title,...e})),renderMenuItem:(e,t)=>r().createElement("div",null,r().createElement(oe,null,t.tag)," ",t.title),renderValue:(e,t)=>r().createElement("div",null,r().createElement(oe,null,t.tag)," ",t.title),onClean:()=>n({...e,jump:null})}),r().createElement(H.Z,null,"Select the question to jump to if the user select this the answer ",r().createElement("em",null,'"',e.answer,'"'))))),we=r().createContext({});function Ze(){return(Ze=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const ke=({formValue:e,onChange:t=(()=>{})})=>r().createElement("div",null,r().createElement(K.Z,{formDefaultValue:e,onChange:e=>{d().isEmpty(e.value)&&(e.value=null),t(e)},fluid:!0},r().createElement(z.Z,null,r().createElement(L.Z,null,"Store value for the answer"),r().createElement(D.Z,{name:"value",accepter:$.Z}),r().createElement(H.Z,null,"Select the value for the answer ",r().createElement("em",null,'"',e.answer,'"')," (which is what the user will see), select tha real value that will be stored (generally a more concise string)"))));ke.propTypes={formDefaultValue:o().shape({value:o().string}),onChange:o().func};const Ce=({value:e,onChange:t,order:n})=>{const{questions:l}=(0,a.useContext)(ie),{question:s}=(0,a.useContext)(we);return r().createElement("div",{className:"ui-survey-editor-multiple-answer"},r().createElement("div",{className:"placeholder"},"ABCDEFGHILMNOPQRTSUVZ"[n]),r().createElement("div",{className:"answer"},r().createElement($.Z,{value:e.answer,onChange:n=>t({...e,answer:n})})),r().createElement("div",{className:"controls"},r().createElement(pe.Z,{appearance:null!=e.value?"primary":"default",icon:r().createElement(b.Z,{icon:"align-justify",size:"lg"}),onClick:async()=>{const n=await ve(ke,e);null!=n&&t({...e,value:n.value})}})," ",r().createElement(pe.Z,{appearance:null!=e.jump?"primary":"default",icon:r().createElement(b.Z,{icon:"arrow-circle-right",size:"lg"}),onClick:async()=>{const n=await ve(e=>r().createElement(xe,Ze({},e,{exclude:s.id,questions:l})),e);null!=n&&t({...e,jump:n.jump})}})))};Ce.propTypes={value:o().shape({answer:o().string.isRequired,id:o().string.isRequired,jump:o().string,value:o().string}),onChange:o().func,order:o().number};const Se=({data:e,onChange:t=(()=>{})})=>r().createElement("div",{className:"control control-multiple"},r().createElement(ge.Z,{value:e,form:Ce,onChange:t,labelAdd:"Add answer",labelEmpty:"No answers"}));Se.propTypes={onChange:o().func,data:o().oneOfType([o().arrayOf(o().shape({answer:o().string.isRequired,id:o().string.isRequired,jump:o().string,value:o().string}))])};const qe=Se;n(7454);const Ne=[{type:"multiple",label:"Multiple Choice",default:[]},{type:"text",label:"Free Text",default:null},{type:"number",label:"Number",default:null},{type:"image",label:"Upload image",default:null}],Te=({question:e,onChange:t=(()=>{}),onRemove:n=(()=>{}),onAdd:a=(()=>{})})=>{let l;switch(e.type){case"multiple":l=r().createElement(qe,{data:e.data,onChange:n=>t({...e,data:n})});break;default:l=r().createElement("div",{className:"control control-empty"},"No configuration available for this type of question")}return r().createElement(we.Provider,{value:{question:e}},r().createElement("div",{className:"question-detail"},r().createElement("div",{className:"header"},r().createElement(oe,{size:"large"},e.tag),r().createElement("div",{className:"buttons"},r().createElement(U.Z,null,r().createElement(de.Z,{renderTitle:()=>r().createElement(pe.Z,{appearance:"primary",icon:r().createElement(b.Z,{icon:"plus"})})},r().createElement(de.Z.Item,{onSelect:()=>a({after:e})},"Add question after"),r().createElement(de.Z.Item,{onSelect:()=>a({before:e})},"Add question before"),r().createElement(de.Z.Item,{onSelect:()=>a({nested:e})},"Add nested question")),r().createElement(pe.Z,{onClick:async()=>{await(0,k.Z)(r().createElement("div",null,"Remove the question ",r().createElement(oe,null,e.tag),_.isEmpty(e.title)?null:r().createElement("em",null,' "',e.title,'"')," ?"),{okLabel:"Yes, remove"})&&n(e)},icon:r().createElement(b.Z,{icon:"trash2"})})))),r().createElement("div",{className:"title"},r().createElement("textarea",{className:"rs-input",rows:3,value:e.title,onChange:n=>t({...e,title:n.target.value})})),r().createElement(U.Z,null,r().createElement(f.Z,null,Ne.map(n=>r().createElement(h.Z,{key:n.type,appearance:e.type===n.type?"primary":"ghost",onClick:()=>t({...e,type:n.type,data:n.default})},n.label)))),r().createElement("div",{className:"configuration"},l)))};Te.propTypes={question:o().shape({id:o().string.isRequired,level:o().number,tag:o().string,title:o().string.isRequired,type:o().oneOf(["multiple","string","number","image"]).isRequired,data:o().oneOfType([o().arrayOf(o().shape({answer:o().string.isRequired,id:o().string.isRequired,jump:o().string,value:o().string}))])}),onChange:o().func,onAdd:o().func,onRemove:o().func};const Ie=Te,Re=(0,G.hv)(({children:e})=>r().createElement("div",{className:"questions"},e)),Oe=({value:e=[{}],onChange:t=(()=>{})})=>{const[n,l]=(0,a.useState)();(0,a.useEffect)(()=>{null==n&&l(d().isEmpty(e)?null:e[0].id)},[e]);const s=(0,a.useCallback)(({oldIndex:n,newIndex:a})=>{const r=((e,t,n)=>{if(t===n)return e;const a=[...e],r=n,l=t,s=r<0?a.length+r:r,i=a.splice(l,1)[0];a.splice(s,0,i);const o=a[n],c=n>0?a[n-1]:null,u=re(e,o),m=ae(e,o);return null!=c&&re(e,c)?a[n].parent=c.id:a[n].parent=null,u&&e.forEach(e=>{e.parent===o.id&&(e.parent=null!=m?m.id:null)}),a})(e,n,a);t(se(r))}),i=e.find(e=>e.id===n),o=le(e);return r().createElement(ie.Provider,{value:{questions:e}},r().createElement("div",{className:"ui-survey-editor"},r().createElement(Re,{onSortEnd:s,helperClass:"sorting",useDragHandle:!0},e.map((e,t)=>r().createElement(me,{key:e.id,index:t,question:e,level:null!=e.parent?o[e.parent]:null,active:n===e.id,onSelect:e=>l(e.id)}))),r().createElement("div",{className:"question-detail"},null!=i&&r().createElement(Ie,{key:i.id,question:i,onChange:a=>t(((e,t,n)=>{const a=[...e];return a[e.findIndex(e=>e.id===t)]=n,a})(e,n,a)),onRemove:n=>{l(null),t(se(((e,t)=>{const n=ae(e,t);return e.filter(e=>e.id!==t.id).map(e=>e.parent==t.id?null!=n?{...e,parent:n.id}:d().omit(e,"parent"):e)})(e,n)))},onAdd:n=>{const{questions:a,question:r}=((e,t)=>{const n={id:(0,te.Z)("q_"),title:"",type:"multiple",data:[]};let a;if(null!=t.after){const r=ne(e,t.after);re(e,r)?n.parent=r.id:n.parent=r.parent,a=d().flatten(e.map(e=>e.id===r.id?[r,n]:e))}else if(null!=t.before){const r=ne(e,t.before);n.parent=r.parent,a=d().flatten(e.map(e=>e.id===r.id?[n,r]:e))}else if(null!=t.nested){const r=ne(e,t.nested);n.parent=r.id,a=d().flatten(e.map(e=>e.id===r.id?[r,n]:e))}return{question:n,questions:se(a)}})(e,n);l(r.id),t(a)}}))))};Oe.propTypes={onChange:o().func,disabled:o().bool,value:o().arrayOf(o().shape({id:o().string.isRequired,level:o().number,tag:o().string,title:o().string.isRequired,type:o().oneOf(["multiple","string","number","image"]).isRequired,data:o().oneOfType([o().arrayOf(o().shape({answer:o().string.isRequired,id:o().string.isRequired,jump:o().string,value:o().string}))])}))};const je=Oe,Ae=[{name:"survey.intro",description:"Text shown at the beginning of the survey if no content is provided"},{name:"survey.end1",description:"End of the survey (version 1)"},{name:"survey.end2",description:"End of the survey (version 2)"},{name:"survey.end3",description:"End of the survey (version 3)"},{name:"survey.wrongAnswer",description:"When the user input a wrong answer, for example an answer which is not listed in the multiple choice,\n      a string where is expected a number, etc  "},{name:"survey.error",description:"Shown when unrecoverable error happened in the survey flow"}],Me=({user:e})=>r().createElement(y.rU,{to:"/surveys?userId="+e.userId},r().createElement(h.Z,{appearance:"ghost"},"View Surveys"));(0,l.plug)("sidebar",null,{id:"surveys",label:"Surveys",icon:"logo-survey",permission:"surveys.view",options:[{id:"answer-surveys",label:"Surveys",url:"/surveys"},{id:"configuration-survey",label:"Configure survey",url:"/configuration-surveys"}]}),(0,l.plug)("pages",(0,s.Z)("survey",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,s]=(0,a.useState)(e),[i,o]=(0,a.useState)(null),[c,u]=(0,a.useState)("questions"),m=(0,a.useRef)(null);return r().createElement("div",null,r().createElement(V.Z,{appearance:"tabs",activeKey:c,onSelect:u,style:{marginBottom:"25px"}},r().createElement(V.Z.Item,{eventKey:"surveys"},"Survey"),r().createElement(V.Z.Item,{eventKey:"questions"},"Questions"),r().createElement(V.Z.Item,{eventKey:"translations"},"Translations")),r().createElement(K.Z,{disabled:!0,formValue:l,formError:i,ref:m,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),o(null)},onCheck:e=>{o(e)}},"translations"===c&&r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(D.Z,{name:"translations",accepter:W.Z,schema:Ae,disabled:n}))),"surveys"===c&&r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(L.Z,null,"Name"),r().createElement(D.Z,{name:"name",autocomplete:"off",accepter:$.Z,disabled:n})),r().createElement(z.Z,null,r().createElement(L.Z,null,"Introduction Message",r().createElement(H.Z,{tooltip:!0},"Select the content to show when the user starts the survey")),r().createElement(D.Z,{name:"introduction",accepter:J.Z,useSlug:!0,disabled:n}))),"questions"===c&&r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(D.Z,{name:"questions",accepter:je,disabled:n}))),r().createElement(z.Z,{style:{marginTop:"40px"}},r().createElement(U.Z,null,r().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{m.current.check()&&t(l)}},"Save configuration"),r().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>r().createElement("div",null,"Survues TBD"),title:"Surveys"}),{permission:"configure",url:"/configuration-surveys",title:"Survey",id:"configuration-surveys"}),(0,l.plug)("pages",j,{url:"/surveys",title:"Surveys",id:"surveys",type:"survey",permission:"surveys.view",breadcrumbs:["Surveys"],labels:{}}),(0,l.plug)("permissions",null,{permission:"surveys.view",name:"View surveys",description:"View surveys answered by chatbot users",group:"Surveys"}),(0,l.plug)("user-record-types",null,{type:"survey",name:"Survey",list:"Surveys",description:"Answer to surveys",form:P,status:[{value:"new",label:"New"},{value:"viewed",label:"Viewed"}]}),(0,l.plug)("user-button",Me);var Be=n(843),Fe=n(99739);const Pe=({formValue:e={},formError:t=null,onChange:n})=>(e=e||{},r().createElement(K.Z,{formValue:e,formError:t,onChange:n,fluid:!0,autoComplete:"off"},r().createElement(z.Z,null,r().createElement(L.Z,null,"Suspend"),r().createElement(Be.Z,{onChange:t=>n({...e,suspended:t}),checked:e.suspended}),r().createElement(H.Z,null,"Suspend the user, use the node ",r().createElement(Fe.Z,{color:"violet"},"User suspended")," in ",r().createElement("b",null,"Node-RED")," flow"))));(0,l.plug)("user-tabs",Pe,{id:"suspend-user",label:"Suspend"});n(33493);var _e=n(29401),Ve=n(55525);const Ke=({channel:e,path:t,value:n,device:a,digits:l=1})=>{console.log("value",n),console.log("channel",e);const s=(e=>{console.log("path",e);let t=-1!==e.indexOf("digital");const n=e.match(/\[([0-9])*\]/),a=null!=n?parseInt(n[1],10):"";return"#IN"+(t?"D":"A")+"."+(a<10?"0"+a:a)+" Input"+(t?" Digital":" Analogico")})(t);return r().createElement("div",{className:"channel-remoto"},r().createElement("div",{className:"meta"},r().createElement("div",{className:"top"},r().createElement("div",{className:"info"},r().createElement("div",{className:"name"},e.name),r().createElement("div",{className:"status"},"Status ",r().createElement(b.Z,{style:{color:"#FF4C28"},icon:"circle"}))),r().createElement("div",{className:"current-value"},null!=n&&r().createElement("span",{className:"figure"},Number(n.val).toFixed(l)),null!=n&&null!=e&&null!=e.unit&&r().createElement("span",{className:"unit"},e.unit))),r().createElement("div",{className:"bottom"},r().createElement(_e.Z,{color:"#69bb0b"},s),"4-20 mA"===e.type&&r().createElement(_e.Z,{color:"#69bb0b"},"4-20 mA"),e.alarm&&r().createElement(_e.Z,{color:"#69bb0b"},r().createElement(b.Z,{icon:"bell"})),!e.alarm&&r().createElement(_e.Z,{color:"#69bb0b"},r().createElement(b.Z,{icon:"bell-slash"})))),r().createElement("div",{className:"graph"},"the graph"),r().createElement("div",{className:"buttons"},r().createElement(Ve.Z,{path:t,jsonSchema:a.jsonSchema,value:a,tooltip:"Edit "+s,title:s,placement:"left",skipValidation:!0})))};(0,l.plug)("device-header",({device:e})=>r().createElement("span",null,"255.255.255.255"),{label:"IP",id:"device-A"}),(0,l.plug)("device-header",({device:e})=>r().createElement("span",null,e.payload.network.apn.name),{label:"Provider",edit:"/network/apn",id:"device-B",tooltip:"Edit network params"}),(0,l.plug)("device-channel",Ke);var ze=n(58222),De=n(81711);function Le(){return(Le=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var $e=n(22057),He=n(29738);const Ue=e=>{const{state:t,dispatch:n}=(0,a.useContext)(De.Z),r=Object.keys(e);(0,a.useEffect)(()=>{r.forEach(a=>{void 0===t[a]&&n({type:"default",key:a,value:e[a]})})},[]);return{state:r.reduce((n,a)=>(n[a]=void 0!==t[a]?t[a]:e[a],n),{}),dispatch:n}};n(42605);var We=n(30381),Je=n.n(We);n(62647);const Ge=({children:e,inbound:t=!0,className:n})=>r().createElement("li",{className:M()("ui-chat-message",n,{clearfix:t,inbound:t,outbound:!t})},e),Qe=({children:e,firstOfGroup:t=!1,position:n,text:a=null})=>d().isEmpty(a)?r().createElement("div",{className:M()("ui-chat-content message",{"first-of-group":t,[n]:!0})},e):r().createElement("div",{className:M()("ui-chat-content message",{"first-of-group":t,[n]:!0}),dangerouslySetInnerHTML:{__html:a.replace(/\n/g,"<br/>")}});Qe.propTypes={text:o().string,position:o().oneOf(["first","middle","last"])};const Xe=({children:e})=>r().createElement("div",{className:"ui-chat-metadata"},e),Ye=({children:e,date:t})=>r().createElement("span",{className:"ui-chat-message-date"},null!=t&&t.format("HH:mm"),e),et=({children:e})=>r().createElement("div",{className:"ui-chat-message-user"},e),tt=({online:e=!0})=>r().createElement(b.Z,{icon:"circle",className:M()("ui-chat-status",{online:e,offline:!e})}),nt=({children:e,layout:t="quick-replies"})=>r().createElement("div",{className:M()("ui-chat-buttons",{"quick-replies":"quick-replies"===t,inline:"inline"===t,card:"card"===t})},e),at=({value:e,onClick:t=(()=>{}),children:n})=>r().createElement("div",{className:"ui-chat-button",onClick:t},n),rt=({onSend:e=(()=>{}),onClear:t=(()=>{})})=>{const[n,l]=(0,a.useState)(""),s=()=>{d().isEmpty(n)||(e(n.replace(/\n$/,"")),l(""))};return r().createElement("div",{className:"ui-chat-message-composer"},r().createElement("div",{className:"editor"},r().createElement("textarea",{name:"message-to-send",value:n,onChange:e=>l(e.target.value),onKeyUp:e=>{e.shiftKey&&13===e.keyCode&&s()},id:"message-to-send",placeholder:"Type your message",rows:"3"})),r().createElement("div",{className:"buttons"},r().createElement(pe.Z,{icon:r().createElement(b.Z,{icon:"send"}),appearance:"primary",size:"sm",onClick:s}),r().createElement(pe.Z,{icon:r().createElement(b.Z,{icon:"trash"}),size:"sm",onClick:t})))};rt.propTypes={onSend:o().func,onClear:o().func};const lt=rt;function st(){return(st=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const it=({messages:e,...t})=>{if(d().isEmpty(e))return;const n=e[0];return r().createElement(Ge,st({},t,{inbound:!1}),r().createElement(Xe,null,r().createElement(Ye,{date:n.ts}),"    ",r().createElement(et,null,n.username)," ",r().createElement(tt,null)),e.map((t,n)=>{let a="middle";switch(0===n?a="first":n===e.length-1&&(a="last"),t.type){case"message":return r().createElement(Qe,{key:t.messageId,position:a,text:t.content});default:return r().createElement("div",null,"Unsupported message type")}}))};it.propTypes={messages:o().arrayOf(o().shape({content:o().string,userId:o().string,username:o().string,ts:o().momentPropTypes}))};const ot=it;var ct=n(53787),ut=n.n(ct);function mt(){return(mt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const dt=({message:e,onClick:t=(()=>{}),...n})=>r().createElement(a.Fragment,null,r().createElement(Qe,{position:"first"},e.content),null!=e.buttons&&0!==e.buttons.length&&r().createElement(nt,{layout:"card"},e.buttons.filter(e=>"newline"!==e.type).map(e=>r().createElement(at,mt({},e,{onClick:()=>t(e),key:`${e.value}-${e.label}`}),e.label))));dt.propTypes={onClick:o().func,message:o().shape({username:o().string,content:o().string,buttons:o().arrayOf(o().shape({label:o().string,value:o().string}))})};const pt=dt;function gt(){return(gt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const ht=({message:e,onClick:t=(()=>{}),...n})=>r().createElement(a.Fragment,null,null!=e.buttons&&0!==e.buttons.length&&r().createElement(nt,{layout:"quick-replies"},e.buttons.filter(e=>"newline"!==e.type).map(e=>r().createElement(at,gt({},e,{onClick:()=>t(e),key:`${e.value}-${e.label}`}),e.label))));ht.propTypes={onClick:o().func,message:o().shape({username:o().string,content:o().string,buttons:o().arrayOf(o().shape({label:o().string,value:o().string}))})};const ft=ht,bt=({children:e})=>{const t=(0,a.useRef)(null);return(0,a.useEffect)(()=>{const e=t.current;e.scrollTo(0,e.scrollHeight)},[e]),r().createElement("div",{className:"ui-chat-messages chat-history",ref:t},r().createElement("ul",null,e))},yt=({children:e,width:t="100%",style:n})=>r().createElement("div",{className:"ui-chat-window chat",style:{width:d().isNumber(t)?t+"px":t,...n}},e),Et=({children:e,...t})=>{const{message:n}=t;return r().createElement(Ge,t,r().createElement(Xe,null,r().createElement(Ye,{date:n.ts}),"    ",r().createElement(et,null,n.username)," ",r().createElement(tt,null)),e)},vt=e=>{const{message:t,markdown:n=!1}=e;let a=t.content;if(n){a=new(ut().Converter)({openLinksInNewWindow:!0}).makeHtml(t.content)}return r().createElement(Qe,{text:a})};vt.propTypes={message:o().shape({content:o().string,userId:o().string,username:o().string,ts:o().momentPropTypes})};class xt extends r().Component{render(){const{message:e}=this.props,t=new Uint8Array(e.content.data),n=new Blob([t],{type:"image/jpeg"}),a=(window.URL||window.webkitURL).createObjectURL(n);return r().createElement(Qe,null,r().createElement("img",{src:a}))}}const wt=({message:e={},onClick:t=(()=>{})})=>{if(_.isArray(e))return r().createElement(ot,{messages:e,onClick:t});switch(e.type){case"message":return r().createElement(Et,{message:e,inbound:e.inbound},r().createElement(vt,{message:e,inbound:e.inbound,markdown:null!=e.params&&"Markdown"===e.params.parseMode}));case"photo":return r().createElement(Et,{message:e,inbound:e.inbound,className:"ui-chat-message-photo"},r().createElement(xt,{message:e,inbound:e.inbound}));case"inline-buttons":return r().createElement(Et,{message:e,inbound:e.inbound},r().createElement(pt,{message:e,inbound:e.inbound,onClick:t}));case"quick-replies":return r().createElement(Et,{message:e,inbound:e.inbound},r().createElement(ft,{message:e,inbound:e.inbound,onClick:t}));default:return r().createElement("div",null,"Unsupported message type")}};n(87499);var Zt=n(97099),kt=n(74730),Ct=n(34715),St=n(77329),qt=n(44721);const Nt=({params:e,onCancel:t=(()=>{}),onSubmit:n=(()=>{}),disabled:l=!1,activeChatbots:s})=>{const[i,o]=(0,a.useState)(e);return r().createElement(be.Z,{backdrop:!0,show:!0,onHide:t,keyboard:!1,className:"modal-simulator"},r().createElement(be.Z.Header,null,r().createElement(be.Z.Title,null,"Simulator Configuration")),r().createElement(be.Z.Body,null,r().createElement(K.Z,{formValue:i,onChange:e=>{const t={...e};null==e.user||null!=i.user&&i.user.id===e.user.id||!e.user.language||(t.language=e.user.language),o(t)},fluid:!0},r().createElement(z.Z,null,r().createElement(L.Z,null,"Impersonated User"),r().createElement(D.Z,{accepter:St.Z,name:"user",placeholder:"Test User",style:{width:"100%"}})),r().createElement(kt.Z,{justify:"space-between",style:{marginBottom:"20px"}},r().createElement(kt.Z.Item,{colspan:11},r().createElement(z.Z,null,r().createElement(L.Z,null,"Language"),r().createElement(D.Z,{accepter:Ct.Z,name:"language",block:!0}))),r().createElement(kt.Z.Item,{colspan:11},r().createElement(z.Z,null,r().createElement(L.Z,null,"Transport"),r().createElement(D.Z,{accepter:qt.Z,name:"nodeId",block:!0,size:"sm",cleanable:!1})))))),r().createElement(be.Z.Footer,null,r().createElement(h.Z,{onClick:t,appearance:"subtle"},"Cancel"),r().createElement(h.Z,{appearance:"primary",disabled:l,appearance:"primary",onClick:()=>n({...i,chatBot:s.find(e=>e.nodeId===i.nodeId)})},"Save configuration")))};Nt.propTypes={params:o().shape({language:o().string,user:o().shape({id:o().number,userId:o().string,username:o().string,language:o().string}),nodeId:o().string}),disabled:o().bool,onCancel:o().func,onSubmit:o().func,activeChatbots:o().arrayOf(o().shape({transport:o().string,nodeId:o().string,name:o().string}))};const Tt=Nt,It=({user:e,language:t,nodeId:n,activeChatbots:l,dispatch:s})=>{const[i,o]=(0,a.useState)(null);return r().createElement("div",{className:"simulator-transport-menu cancel-drag"},null!=i&&r().createElement(Tt,{activeChatbots:l,params:i,onCancel:()=>o(null),onSubmit:e=>{s({type:"params",params:e}),o(null)}}),r().createElement("div",{className:"meta"},null!=e&&r().createElement("div",{className:"user"},e.username," ",r().createElement("em",null,"(",e.userId,")")),null==e&&r().createElement("div",{className:"user"},"Test User"),r().createElement(Zt.Z,null,t)),r().createElement(pe.Z,{appearance:"subtle",icon:r().createElement(b.Z,{icon:"cog"}),onClick:()=>o({user:e,language:t,nodeId:n}),style:{marginTop:"-3px",marginRight:"1px"}}))};It.propTypes={user:o().shape({id:o().number,userId:o().string,username:o().string,language:o().string}),language:o().string,nodeId:o().string,dispatch:o().func,activeChatbots:o().arrayOf(o().shape({transport:o().string,nodeId:o().string,name:o().string}))};const Rt=It,Ot=(e,t)=>{switch(t.type){case"message":const{payload:n,topic:a}=t;if("simulator"!==a)return e;const r=d().isArray(e.simulator.messages[n.transport])?e.simulator.messages[n.transport]:[];let l;l=d().isArray(n.payload)?n.payload.map(e=>({...n,...e,payload:void 0,ts:Je()()})):{...n,ts:Je()()};const s={...e.messages,[n.transport]:[...r,l]};return{...e,simulator:{...e.simulator,messages:s}};case"clear":return{...e,simulator:{...e.simulator,messages:{...e.messages,[t.transport]:[]}}};case"globals":return{...e,simulator:{...e.simulator,globals:t.globals}};case"params":const{params:i}=t;return{...e,simulator:{...e.simulator,transport:i.chatBot.transport,nodeId:i.chatBot.nodeId,language:i.language,user:i.user}};default:return e}},jt=r().createContext();var At;(0,l.plug)("widgets",(0,$e.Z)((At=({activeChatbots:e,user:t})=>{const{state:{simulator:n},dispatch:a,sendMessage:l}=(({activeChatbots:e})=>{const{state:t,dispatch:n}=Ue({simulator:{messages:{},transport:d().isEmpty(e)?null:e[0].transport,nodeId:d().isEmpty(e)?null:e[0].nodeId,globals:null,language:"en",user:null}}),{sendMessage:a}=(0,He.Z)({onMessage:(e,t)=>{"simulator"===e&&n({type:"message",payload:t,topic:e})}});return{state:t,dispatch:n,sendMessage:(e,{echo:n=!0}={})=>{const{transport:r,nodeId:l,language:s,user:i}=t.simulator;a("simulator",{transport:r,nodeId:l,language:s,userId:null!=i?i.userId:42,username:null!=i?i.username:"testUser",firstName:null!=i?i.first_name:null,lastName:null!=i?i.last_name:null,payload:{content:e,type:"message"},simulatorOptions:{echo:n}})}}})({activeChatbots:e}),{messages:s,transport:i,nodeId:o,language:c,user:u}=n,m=null==e,p=e=>{!d().isObject(e)||"postback"!==e.type&&"quick-reply"!==e.type||l(e.value,{echo:!1})};return r().createElement(ze.Z,{title:"Chat Simulator",className:"chat-simulator",menu:!m&&r().createElement(Rt,{user:u,language:c,nodeId:o,transport:i,dispatch:a,activeChatbots:e,onChange:e=>a({type:"chatBot",chatBot:e})})},!m&&r().createElement(jt.Provider,{value:n},r().createElement(yt,null,r().createElement(bt,null,null!=s[i]&&s[i].map(e=>d().isArray(e)?r().createElement(wt,{onClick:p,key:e.map(e=>e.messageId).join(),message:e.map(e=>({...e,username:"chatbot"}))}):r().createElement(wt,{onClick:p,key:e.messageId,message:e.inbound?e:{...e,username:"chatbot"}}))),r().createElement(lt,{onSend:e=>l(e),onClear:()=>a({type:"clear",transport:i})}))))},e=>r().createElement(De.Z.Consumer,null,({activeChatbots:t})=>r().createElement(At,Le({},e,{activeChatbots:t}),e.children))),"user"),{x:0,y:0,w:2,h:8,isResizable:!0,id:"simulator-widget",permission:"simulator"}),(0,l.plug)("reducers",(e,t)=>"default"===t.type?{...e,[t.key]:t.value}:e),(0,l.plug)("reducers",Ot),(0,l.plug)("permissions",null,{permission:"simulator",name:"Chat Simulator",description:"Access to chat simulator",group:"General"});var Mt=n(25870),Bt=n(83675);const Ft=[{name:"faq.bestMatch",description:"Text shown before the list of opening hours"},{name:"faq.sorryNotFound1",description:"Answer when no support articles were found (first version)"},{name:"faq.sorryNotFound2",description:"Answer when no support articles were found (second version)"},{name:"faq.sorryNotFound3",description:"Answer when no support articles were found (third version)"},{name:"faq.askSomething1",description:"What the chatbot answer when the user requests help (first version)"},{name:"faq.askSomething2",description:"What the chatbot answer when the user requests help (second version)"},{name:"faq.askSomething3",description:"What the chatbot answer when the user requests help (third version)"},{name:"faq.no"},{name:"faq.yes"},{name:"faq.ok"},{name:"faq.wasUseful",description:"Asked if an article is useful after a search"},{name:"faq.thanksBye1",description:"Answer when the user is satisfied with the found article (first version)"},{name:"faq.thanksBye2",description:"Answer when the user is satisfied with the found article (second version)"},{name:"faq.thanksBye3",description:"Answer when the user is satisfied with the found article (third version)"},{name:"faq.selectOneOfThese",description:"Shown when the user is asked to select on of the related articles of a search"},{name:"faq.somethingWentWrong",description:"Shown when an unrecoverable error occurs"},{name:"faq.noMoreArticles",description:"Shown when user ask to more results but there aren't"}],{Contents:Pt,Categories:_t}=Bt.VY,{NodeRedNode:Vt,SlugHelp:Kt,TypeCommand:zt,ChatbotStatus:Dt}=Bt.AK;(0,l.plug)("sidebar",null,{id:"knowledgebase",label:"Knowledge Base",url:"/knowledge-base",icon:"file-text",permission:"faq.edit",options:[{label:"Articles",url:"/knowledge-base",id:"faqs"},{label:"Categories",url:"/knowledge-base/categories",id:"faqs-categories"}]}),(0,l.plug)("sidebar",null,{id:"knowledgebase",label:"Knowledge Base",url:"/knowledge-base",icon:"file-text",permission:["faq.configure","configure"],options:[{label:"Configuration",url:"/knowledge-base/configure",id:"faqs-configure"}]}),(0,l.plug)("pages",_t,{url:"/knowledge-base/categories",title:"Categories",id:"faq-categories",permission:"faq.edit",namespace:"faq",breadcrumbs:[{title:"Knowledge Base",url:"/knowledge-base"},"Categories"]}),(0,l.plug)("pages",(0,Bt.ln)("knowledge-base",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,s]=(0,a.useState)(e),[i,o]=(0,a.useState)(null),[c,u]=(0,a.useState)("openings"),m=(0,a.useRef)(null);return r().createElement("div",null,r().createElement(V.Z,{appearance:"tabs",activeKey:c,onSelect:u,style:{marginBottom:"25px"}},r().createElement(V.Z.Item,{eventKey:"openings"},"Knowledge Base"),r().createElement(V.Z.Item,{eventKey:"translations"},"Translations")),r().createElement(K.Z,{disabled:!0,formValue:l,formError:i,ref:m,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),o(null)},onCheck:e=>{o(e)}},"translations"===c&&r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(D.Z,{name:"translations",accepter:Bt.Xy,schema:Ft,disabled:n}))),"openings"===c&&r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(L.Z,null,"Answer by Default"),r().createElement(D.Z,{name:"answerByDefault",accepter:Be.Z,disabled:n}),r().createElement(H.Z,null,"With this option ",r().createElement("em",null,"enabled"),", the block execute a search for every input of the user, if ",r().createElement("em",null,"disabled")," the user has to enter in the ",r().createElement("em",null,"ask question state")," entering some sentences like ",r().createElement("em",null,'"I need help"'))),r().createElement(z.Z,null,r().createElement(L.Z,null,"Articles Sensitivity"),r().createElement(D.Z,{disabled:n,name:"threshold",accepter:Bt.nH}),r().createElement(H.Z,null,"The minimum score of an article to be considered relevant. Lower this value if the search doesn't return any value.")),r().createElement(z.Z,null,r().createElement(L.Z,null,"NLP Sensitivity"),r().createElement(D.Z,{disabled:n,name:"nlpThreshold",accepter:Bt.nH}),r().createElement(H.Z,null,"The minimum score of an intent to be considered relevant. Lower this value if the NLP doesn't catch any intent of the user input, raise this value if the NLP of this block is interfering with the NLP of other blocks.")),r().createElement(z.Z,null,r().createElement(L.Z,null,"Suggest Articles"),r().createElement(D.Z,{disabled:n,name:"articlesToSuggest",accepter:Bt.zs,min:1,max:20,style:{maxWidth:"200px"},postfix:r().createElement("span",null," articles")}),r().createElement(H.Z,null,'The maximum articles to suggest if user clicks on "More articles"'))),r().createElement(z.Z,{style:{marginTop:"40px"}},r().createElement(U.Z,null,r().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{m.current.check()&&t(l)}},"Save configuration"),r().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>{const{sendMessage:e}=(0,He.Z)();return r().createElement("div",null,r().createElement(Vt,null,"Knowledge Base"),r().createElement("p",null,"Configure the ",r().createElement("b",null,"Knowledge Base")," block, use the ",r().createElement("b",null,"Articles")," section to enter the knowledge base of your product or service.",r().createElement("br",null),"For articles that represent the same content but in different languages, use the same ",r().createElement("em",null,"slug"),", the block will take care of the rest."),r().createElement("p",null,"Adjust the sensitivity of the search engine, raise it when the results are not relevant to the user's question, lower it when the search is not returning anything, keep an eye on the system console to see the score of the searches.",r().createElement("br",null),"With ",r().createElement("b",null,"Answer by Default")," the block can answer automatically to any input text message or can start answering only when the chatbot in ",r().createElement(Dt,null,"faq.answer")," status, which is entered when the user types senteces like ",r().createElement(zt,null,"I need help"),"."),r().createElement(Kt,null),r().createElement("div",{style:{textAlign:"center",marginTop:"10px"}},r().createElement(h.Z,{appearance:"primary",onClick:()=>{e("faq.refresh"),Mt.Z.success({title:"Knowledge Base",description:"Re-index of articles started"})}},"Refresh index")))},title:"Knowledge Base"}),{url:"/knowledge-base/configure",title:"Configure",id:"faqs-configure",permission:["faq.configure","configure"]}),(0,l.plug)("pages",Pt,{url:"/knowledge-base",title:"Knowledge Base",id:"faqs",namespace:"faq",permission:"faq.edit",breadcrumbs:["Knowledge Base","Articles"],labels:{saveContent:"Save article"}}),(0,l.plug)("permissions",null,{permission:"faq.edit",name:"Edit Kwnowledge base",description:"Add and edit articles of the knowledge base",group:"Knowledge Base"}),(0,l.plug)("permissions",null,{permission:"faq.configure",name:"Configure Kwnowledge base",description:"Configure Kwnowledge base",group:"Knowledge Base"});var Lt=n(63609),$t=n(72753);const{StringType:Ht,ArrayType:Ut,ObjectType:Wt,DateType:Jt}=$t.Z.Types,Gt=$t.Z.Model({openings:Ut().of(Wt().shape({start:Jt().isRequired("Specify starting hour"),end:Jt().isRequired("Specify ending hour"),range:Ht().isRequired("Select a range for opening hours")})).addRule(e=>d().isArray(e)&&0!==e.length,"Specify at least an opening hour")}),Qt=[{key:"url",type:"string",description:"The url opened clicking on the card button",defaultValue:"http://",color:"red"},{key:"labelButton",type:"string",description:"The label of the card button",defaultValue:"Open",color:"orange"}],Xt=({value:e,onChange:t,disabled:n=!1})=>r().createElement("div",null,r().createElement(J.Z,{disabled:n,useSlug:!0,canCreate:!0,value:e.slug,customFieldsSchema:Qt,fluid:!0,onChange:n=>t({...e,slug:n})}));Xt.propTypes={value:o().shape({slug:o().string}),onChange:o().func,disabled:o().bool};const Yt=Xt,en=[{name:"carousel.intro",description:"Introduction text of the carousel"}];(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"carousel",label:"Carousel",url:"/configuration-carousel"}]}),(0,l.plug)("pages",(0,s.Z)("carousel",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,s]=(0,a.useState)(e),[i,o]=(0,a.useState)(null),[c,u]=(0,a.useState)("carousel"),m=(0,a.useRef)(null);return console.log("render",n),r().createElement("div",null,r().createElement(V.Z,{appearance:"tabs",activeKey:c,onSelect:u,style:{marginBottom:"25px"}},r().createElement(V.Z.Item,{eventKey:"carousel"},"Carousel"),r().createElement(V.Z.Item,{eventKey:"translations"},"Translations")),r().createElement(K.Z,{model:Gt,disabled:!0,formValue:l,formError:i,ref:m,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),o(null)},onCheck:e=>{o(e)}},"translations"===c&&r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(D.Z,{name:"translations",accepter:W.Z,schema:en,disabled:n}))),"carousel"===c&&r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(L.Z,null,"Carousel Cards",r().createElement(H.Z,{tooltip:!0},"Select one or more content")),r().createElement(D.Z,{name:"cards",accepter:ge.Z,form:Yt,labelAdd:"Add card",disabled:n}))),r().createElement(z.Z,{style:{marginTop:"40px"}},r().createElement(U.Z,null,r().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{m.current.check()&&t(l)}},"Save configuration"),r().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>r().createElement("div",null,r().createElement(Lt.NodeRedNode,null,"Cards"),r().createElement("p",null,"Configure the carousel of cards to show in the chabot: select one or more ",r().createElement("em",null,"slugs")," from the ",r().createElement("strong",null,"Content")," section."),r().createElement(Lt.SlugHelp,null)),title:"Carousel"}),{permission:"configure",url:"/configuration-carousel",title:"Carousel",id:"configuration-carousel"});var tn=n(14774);const nn=e=>d().isEmpty(e.first_name)&&d().isEmpty(e.last_name)?d().isEmpty(username)?"Anonymous (id: {id})":e.username:[e.first_name,e.last_name].filter(e=>!d().isEmpty(e)).join(" "),an=({value:e,validation:t,onChange:n=(()=>{}),onSubmit:a=(()=>{})})=>{const{activeChatbots:l}=(0,tn.Z)();return r().createElement("div",null,r().createElement(K.Z,{fluid:!0,formValue:e,onChange:n,formError:t},r().createElement(kt.Z,{justify:"space-between"},r().createElement(kt.Z.Item,{colspan:15},r().createElement(z.Z,null,r().createElement(L.Z,null,"Recipient"),r().createElement(D.Z,{name:"recipient",accepter:Bt.P2,cleanable:!0,onChange:t=>{if(null!=t&&_.isArray(t.chatIds)&&!_.isEmpty(t.chatIds)){const a=t.chatIds.find(e=>((e,t)=>e.some(e=>e.transport===t))(l,e.transport));null!=a&&n({...e,chatId:a.chatId,recipient:t,botNode:l.find(e=>e.transport===a.transport).nodeId})}}}))),r().createElement(kt.Z.Item,{colspan:8},r().createElement(z.Z,null,r().createElement(L.Z,null,"Transport",r().createElement(H.Z,{tooltip:!0},"Shows only platforms for which the selected users has a valid ",r().createElement("em",null,"chatId"))),r().createElement(D.Z,{name:"botNode",accepter:Bt.Tl,transports:null!=e.recipient?e.recipient.chatIds.map(e=>e.transport):null,disabled:null==e.recipient,onChange:t=>{const a=l.find(e=>e.nodeId===t);if(null!=a&&null!=e.recipient){const r=e.recipient.chatIds.find(e=>e.transport===a.transport);null!=r&&n({...e,chatId:r.chatId,botNode:t})}},block:!0})))),r().createElement(z.Z,{style:{marginTop:"15px"}},r().createElement(L.Z,null,"Message to send"),r().createElement(D.Z,{name:"message",componentClass:"textarea",style:{height:"100%"},onKeyUp:e=>{e.shiftKey&&13===e.keyCode&&a()}}))))},{useModal:rn}=Bt.u_,ln=e=>null!=e.recipient&&null!=e.chatId&&null!=e.botNode&&!d().isEmpty(e.message),{StringType:sn,ObjectType:on}=$t.Z.Types,cn=($t.Z.Model({recipient:on().isRequired("Select recipient"),botNode:sn().isRequired("Select chatbot platoform"),message:sn().isRequired("Enter message for the user")}),({user:e,appearance:t="ghost",transport:n})=>{const{sendMessage:a}=(0,He.Z)(),{activeChatbots:l}=(0,tn.Z)(),{open:s,close:i,validate:o,error:c,disable:u,openWithModel:m,openWith:p}=rn({view:an,title:"Send message",labelSubmit:"Send message",size:"sm"});let g,f;if(!d().isEmpty(n)){if(e.chatIds.some(e=>e.transport===n)){const t=l.find(e=>e.transport===n);console.log("chatBot",t,l,n),null!=t&&(g=t.nodeId,f=e.chatIds.find(e=>e.transport===n).chatId)}}return r().createElement(h.Z,{appearance:t,onClick:async()=>{let t={recipient:e,botNode:g,chatId:f,message:""};t=await p(t,ln),t&&(a("message.send",t),Mt.Z.success({title:"Message sent",description:`Message sent successfully to "${nn(t.recipient)}"`}))}},"Contact User")});n(73470);const{WidgetForm:un,Content:mn,Footer:dn}=Bt.DD;(0,l.plug)("widgets",({stats:e})=>{const[t,n]=(0,a.useState)({message:""}),l=!_.isEmpty(t.chatId)&&!_.isEmpty(t.botNode),{sendMessage:s}=(0,He.Z)();return r().createElement(Bt.s_,{title:"Send Message",className:"widget-send-message"},r().createElement(un,{fluid:!0,formValue:t,onChange:e=>n(e)},r().createElement(mn,null,r().createElement(an,{value:t,onChange:e=>n(e),onSubmit:()=>{s("message.send",t),n({...t,message:""})}})),r().createElement(dn,null,r().createElement(z.Z,null,r().createElement(U.Z,null,r().createElement(h.Z,{appearance:"primary",disabled:!l,onClick:()=>{s("message.send",t),n({...t,message:""})}},"Send Message"),r().createElement("div",{className:"key-hint"},"Shift + Enter to Send"),r().createElement(h.Z,{style:{float:"right"},appearance:"default",onClick:()=>n({botNode:null,recipient:null,chatId:null,message:""})},"Cancel"))))))},{x:0,y:0,w:2,h:6,isResizable:!0,id:1}),(0,l.plug)("user-button",cn),(0,l.plug)("user-record-buttons",({record:e})=>r().createElement(cn,{transport:e.transport,appearance:"primary",user:e.user}),{type:"survey"});var pn=n(15593),gn=n.n(pn),hn=n(38631);const fn=u()`
query {
  contents(namespace: "plugins") {
    id,
    title,
    body,
    payload,
    fields {
      name,
      value
    }
  }
}
`,bn=()=>{const e=(0,S.xJ)(),{data:t}=(0,hn.Z)({namespace:"market-place"}),[n,l]=(0,a.useState)(null),{put:s}=gn()("https://api.jsonbin.io",{headers:{"Content-Type":"application/json","secret-key":null!=t?t.jsonbin_key:null,versioning:"false"}}),i=null!=t&&!d().isEmpty(t.jsonbin_key);return r().createElement(h.Z,{disabled:null!=n||!i,appearance:"primary",onClick:async()=>{l("Loading...");const n=(await e.query({query:fn,fetchPolicy:"network-only"})).data.contents.map(e=>{const t=e.fields.reduce((e,t)=>({...e,[t.name]:t.value}),{});return console.log("---\x3e",e.payload),console.log("--",null==e.payload||d().isEmpty(e.payload.initial_configuration)?null:e.payload.initial_configuration),{id:t.id,name:e.title,description:e.body,url:t.url,flow:t.flow,version:t.version,github:t.github,keywords:t.tags,author:{name:t.author,url:t.author_url},initialConfiguration:null==e.payload||d().isEmpty(e.payload.initial_configuration)?null:e.payload.initial_configuration}});l("Publishing..."),await s("/b/"+t.jsonbin_id,n),l(null),Mt.Z.success({title:"Published",description:"Plugin list published succesfully "})}},null!=n?n:"Publish plugins")},yn=({formValue:e={},onChange:t=(()=>{})})=>{const{initial_configuration:n}=e||{};return r().createElement("div",{style:{paddingBottom:"15px"}},r().createElement(Bt.Ad,{value:d().isEmpty(n)?"":n,height:"55vh",onChange:n=>{t({...e,initial_configuration:d().isEmpty(n)?null:n})}}))};(0,l.plug)("sidebar",null,{id:"market-place",label:"Market Place",url:"/market-place",icon:"shopping-basket"}),(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"configuration-market-place",label:"Market Place",url:"/configuration-market-place"}]}),(0,l.plug)("pages",(0,Bt.ln)("market-place",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,s]=(0,a.useState)(e),[i,o]=(0,a.useState)(null),c=(0,a.useRef)(null);return r().createElement("div",null,r().createElement(K.Z,{formValue:l,formError:i,ref:c,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),o(null)},onCheck:e=>{o(e)}},r().createElement(z.Z,null,r().createElement(L.Z,null,"JSONbin.io id"),r().createElement(D.Z,{name:"jsonbin_id",accepter:$.Z,disabled:n}),r().createElement(H.Z,null,"The ",r().createElement("em",null,"id")," of the ",r().createElement("strong",null,"jsonbin.io")," snippet of the plugins meta info")),r().createElement(z.Z,null,r().createElement(L.Z,null,"JSONbin.io key"),r().createElement(D.Z,{name:"jsonbin_key",accepter:$.Z,disabled:n}),r().createElement(H.Z,null,"The ",r().createElement("em",null,"secret key")," to write on ",r().createElement("strong",null,"jsonbin.io"))),r().createElement(z.Z,{style:{marginTop:"40px"}},r().createElement(U.Z,null,r().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{c.current.check()&&t(l)}},"Save configuration"),r().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>r().createElement("div",null,"Configure the id and the key to access ",r().createElement("strong",null,"jsonbing.io")," for the plugins met information.",r().createElement("br",null),"Docs about the API ",r().createElement("a",{href:"https://jsonbin.io/api-reference/bins/read",target:"blank"},"here"),"."),title:"Market Place"}),{permission:"configure",url:"/configuration-market-place",title:"Market Place",id:"configuration"}),(0,l.plug)("pages",Bt.VY.Contents,{url:"/market-place",title:"Market Place",id:"market-place",namespace:"plugins",breadcrumbs:["Market Place","Plugins"],labels:{saveContent:"Save plugin",createContent:"Create plugin",emptyContent:"No plugins"},custom:()=>r().createElement(bn,null),customFieldsSchema:[{key:"url",type:"string",description:"URL of the compiled plugin",color:"cyan"},{key:"flow",type:"string",description:"URL of the Node-RED flow for this plugin",color:"cyan"},{key:"id",type:"string",description:"Unique id of the plugin",color:"red"},{key:"version",type:"string",description:"The version of the current (latest) plugin",color:"red"},{key:"github",type:"string",description:"The URL of the github page of the plugin",color:"red"},{key:"author",type:"string",description:"The username of the author of the plugin",color:"orange"},{key:"author_url",type:"string",description:"The home page of the username, if any",color:"orange"},{key:"tags",type:"tags",description:"List of keywords, comma separated",color:"red"}]}),(0,l.plug)("content-tabs",yn,{id:"content-configuration",label:"Configuration",namespace:["plugins"]});const{StringType:En,ArrayType:vn,ObjectType:xn,DateType:wn}=$t.Z.Types,Zn=$t.Z.Model({commands:vn().of(xn().shape({command:En().isRequired("Specify the command").addRule(e=>e.startsWith("/"),'Command should start with "/"'),slug:En().isRequired("Specifig a slug (shortcut) for a content")})).addRule(e=>{const t=e.map(e=>e.command);return d().uniq(t).length===t.length},"Some contents have the same command")}),kn=({value:e,onChange:t,disabled:n=!1})=>r().createElement(kt.Z,{justify:"space-between"},r().createElement(kt.Z.Item,{colspan:8},r().createElement($.Z,{value:e.command,placeholder:"/command",onChange:n=>t({...e,command:n})})),r().createElement(kt.Z.Item,{colspan:15},r().createElement(Bt.MN,{disabled:n,useSlug:!0,canCreate:!0,value:e.slug,fluid:!0,onChange:n=>t({...e,slug:n})})));kn.propTypes={value:o().shape({slug:o().string,command:o().string}),onChange:o().func,disabled:o().bool};const Cn=kn,{NodeRedNode:Sn,SlugHelp:qn,TypeCommand:Nn}=Bt.AK;(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"commands",label:"Commands",url:"/configuration-commands"}]}),(0,l.plug)("pages",(0,Bt.ln)("commands",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,s]=(0,a.useState)(e),[i,o]=(0,a.useState)(null),c=(0,a.useRef)(null);return r().createElement("div",null,r().createElement(K.Z,{model:Zn,disabled:!0,formValue:l,formError:i,ref:c,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),o(null)},onCheck:e=>{o(e)}},r().createElement(z.Z,null,r().createElement(L.Z,null,"Content Commands",r().createElement(H.Z,{tooltip:!0},"Select one or more content to be shown after a command-line message (like ",r().createElement("em",null,"/privacy"),", etc)")),r().createElement(D.Z,{name:"commands",accepter:Bt.JX,form:Cn,labelAdd:"Add command",disabled:n,sortable:!1})),r().createElement(z.Z,{style:{marginTop:"40px"}},r().createElement(U.Z,null,r().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{c.current.check()&&t(l)}},"Save configuration"),r().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>r().createElement("div",null,r().createElement(Sn,null,"Commands"),r().createElement("p",null,"Use the this node to show some contents in response of some command-like messages from users, this is a perfect place to put some statics documents for pricacy or tos (for example ",r().createElement(Nn,null,"/privacy")," or ",r().createElement(Nn,null,"/terms"),")."),r().createElement(qn,null)),title:"Commands"}),{permission:"configure",url:"/configuration-commands",title:"Commands",id:"configuration-commands"});const{NodeRedNode:Tn,SlugHelp:In,TypeCommand:Rn}=Bt.AK;(0,l.plug)("sidebar",null,{permission:"configure",id:"configuration",label:"Configuration",icon:"cog",options:[{id:"welcome-message",label:"Welcome Message",url:"/welcome"}]}),(0,l.plug)("pages",(0,Bt.ln)("survey",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,s]=(0,a.useState)(e),[i,o]=(0,a.useState)(null),c=(0,a.useRef)(null);return r().createElement("div",null,r().createElement(K.Z,{disabled:!0,formValue:l,formError:i,ref:c,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),o(null)},onCheck:e=>{o(e)}},r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(L.Z,null,"Welcome message",r().createElement(H.Z,{tooltip:!0},"Select the content to show when the user joins the chatbot")),r().createElement(D.Z,{name:"page",accepter:Bt.MN,useSlug:!0,disabled:n}))),r().createElement(z.Z,{style:{marginTop:"40px"}},r().createElement(U.Z,null,r().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{c.current.check()&&t(l)}},"Save configuration"),r().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>r().createElement("div",null,r().createElement(Tn,null,"New User"),r().createElement("p",null,"Select the message to show when a new user joins the chatbot by selecting a ",r().createElement("em",null,"slug")," from the ",r().createElement("strong",null,"Content")," section."),r().createElement(In,null),r().createElement("p",null,"To test message type ",r().createElement(Rn,null,"/start")," in the chatbot")),title:"Welcome message"}),{permission:"configure",url:"/welcome",title:"Welcome Message",id:"page-welcome-message"});const{StringType:On,ArrayType:jn,ObjectType:An,DateType:Mn}=$t.Z.Types,Bn=$t.Z.Model({openings:jn().of(An().shape({start:Mn().isRequired("Specify starting hour"),end:Mn().isRequired("Specify ending hour"),range:On().isRequired("Select a range for opening hours")})).addRule(e=>d().isArray(e)&&0!==e.length,"Specify at least an opening hour")});var Fn=n(77147);const Pn=[{value:"mo",label:"Monday"},{value:"tu",label:"Tuesday"},{value:"we",label:"Wednesday"},{value:"th",label:"Thursday"},{value:"fr",label:"Friday"},{value:"sa",label:"Saturday"},{value:"su",label:"Sunday"},{value:"mo-fr",label:"Monday - Friday"},{value:"mo-sa",label:"Monday - Saturday"},{value:"mo-su",label:"Monday - Sunday"},{value:"sa-su",label:"Saturday - Sunday"}];var _n=n(88849);const Vn=e=>{const t=new Date(e);return(0,_n.Z)(t)?t:null},Kn=({value:e,onChange:t,disabled:n=!1})=>r().createElement("div",null,r().createElement(kt.Z,{justify:"space-between"},r().createElement(kt.Z.Item,{colspan:7},r().createElement(Fn.Z,{readOnly:n,format:"HH:mm",value:Vn(e.start),style:{width:"100%"},onChange:n=>t({...e,start:n})})),r().createElement(kt.Z.Item,{colspan:7},r().createElement(Fn.Z,{readOnly:n,value:Vn(e.end),format:"HH:mm",style:{width:"100%"},onChange:n=>t({...e,end:n})})),r().createElement(kt.Z.Item,{colspan:8},r().createElement(g.Z,{readOnly:n,format:"HH:mm",block:!0,value:e.range,data:Pn,style:{width:"100%"},onChange:n=>t({...e,range:n})}))));Kn.propTypes={value:o().shape({start:o().string,end:o().string,range:o().oneOf(["mo","tu","we","th","fr","sa","su","mo-fr","mo-sa","mo-su","sa-su"])})};const zn=Kn,Dn=[{name:"openings.openWhen",description:"Text shown before the list of opening hours"},{name:"openings.monday"},{name:"openings.tuesday"},{name:"openings.wednesday"},{name:"openings.thursday"},{name:"openings.friday"},{name:"openings.saturday"},{name:"openings.sunday"},{name:"openings.monfri"},{name:"openings.monsat"},{name:"openings.monsun"},{name:"openings.satsun"},{name:"openings.yes"},{name:"openings.no"}],{NodeRedNode:Ln,SlugHelp:$n,TypeCommand:Hn}=Bt.AK;(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"configuration-hours",label:"Opening hours",url:"/configuration-openings"}]}),(0,l.plug)("pages",(0,Bt.ln)("shop-openings",({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,s]=(0,a.useState)(e),[i,o]=(0,a.useState)(null),[c,u]=(0,a.useState)("openings"),m=(0,a.useRef)(null);return r().createElement("div",null,r().createElement(V.Z,{appearance:"tabs",activeKey:c,onSelect:u,style:{marginBottom:"25px"}},r().createElement(V.Z.Item,{eventKey:"openings"},"Openings"),r().createElement(V.Z.Item,{eventKey:"translations"},"Translations")),r().createElement(K.Z,{model:Bn,disabled:!0,formValue:l,formError:i,ref:m,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{s(e),o(null)},onCheck:e=>{o(e)}},"translations"===c&&r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(D.Z,{name:"translations",accepter:Bt.Xy,schema:Dn,disabled:n}))),"openings"===c&&r().createElement(a.Fragment,null,r().createElement(z.Z,null,r().createElement(L.Z,null,"Openings hours"),r().createElement(D.Z,{name:"openings",accepter:Bt.JX,form:zn,labelAdd:"Add opening hour",disabled:n})),r().createElement(z.Z,null,r().createElement(L.Z,null,"Content"),r().createElement(D.Z,{useSlug:!0,readOnly:n,name:"content",accepter:Bt.MN}),r().createElement(H.Z,null,"Select a ",r().createElement("em",null,"slug")," for a multi-language content to show additional information when a user requests information about opening hours")),r().createElement(z.Z,null,r().createElement(L.Z,null,"Sensitivity"),r().createElement(D.Z,{disabled:n,name:"threshold",accepter:Bt.nH}),r().createElement(H.Z,null,"The minimum score of an intent to be considered relevant. Lower this value if the NLP doesn't catch any intent of the user input, raise this value if the NLP of this block is interfering with the NLP of other blocks."))),r().createElement(z.Z,{style:{marginTop:"40px"}},r().createElement(U.Z,null,r().createElement(h.Z,{disabled:n,appearance:"primary",onClick:()=>{m.current.check()&&t(l)}},"Save configuration"),r().createElement(h.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&s(e)}},"Reset")))))},{Legend:()=>r().createElement("div",null,r().createElement(Ln,null,"Opening Hours node"),r().createElement("p",null,"Configure the behaviour of this node: customize the opening hours and and some additional content (for example to show extra openings, etc)."),r().createElement($n,null)),title:"Opening Hours"}),{permission:"configure",url:"/configuration-openings",title:"Opening Hours",id:"configuration"})},42367:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".channel-remoto{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:flex-start;align-items:flex-start;height:100px;border:1px solid #cccccc;border-radius:3px;margin-bottom:10px}.channel-remoto .rs-icon-bell,.channel-remoto .rs-icon-bell-slash{font-size:11px}.channel-remoto .rs-tag+.rs-tag{margin-left:5px}.channel-remoto .meta{flex:0 0 350px;height:100px;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.channel-remoto .meta .top{flex:1 0;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:flex-start;align-items:flex-start}.channel-remoto .meta .top .info{flex:1 0;padding:5px}.channel-remoto .meta .top .info .name{font-weight:bold}.channel-remoto .meta .top .current-value{flex:0 0 auto;margin-right:8px}.channel-remoto .meta .top .current-value .figure{font-weight:bold;font-size:26px;color:#666666;text-align:center;margin-top:10px;display:inline-block}.channel-remoto .meta .top .current-value .unit{font-weight:bold;color:#999999;font-size:16px;margin-left:4px;display:inline-block}.channel-remoto .meta .bottom{flex:0 0 20px;margin:0px 0px 5px 3px}.channel-remoto .graph{flex:1 0}.channel-remoto .buttons{flex:0 0 15px;margin-right:5px;margin-top:3px}\n",""])},47155:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".widget-send-message .rs-form-group{flex:1 0;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.widget-send-message .rs-form-group .rs-form-control-wrapper{flex:1 0}.widget-send-message .key-hint{color:#999999;display:inline-block}\n",""])},13794:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".simulator-transport-menu .rs-picker-subtle .rs-btn:focus,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle:focus,.simulator-transport-menu .rs-picker-subtle .rs-btn.rs-btn-focus,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle.rs-btn-focus,.simulator-transport-menu .rs-picker-subtle .rs-btn:hover,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle:hover{background-color:#ffffff}.simulator-transport-menu .rs-picker-toggle{margin-top:-5px}.chat-simulator .meta{display:inline-block;margin-right:5px}.chat-simulator .meta .user{display:inline-block;margin-right:5px;font-size:14px;font-weight:normal}.chat-simulator .ui-grid-panel-content{margin:-5px -10px -10px -10px}.chat-simulator .ui-chat-window{border-bottom-left-radius:4px;border-bottom-right-radius:4px}.picker-item-transport em{font-weight:normal;color:#777777;font-size:12px}.picker-item-transport b{color:#333333;font-size:13px}\n",""])},55221:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".survey-viewer{padding:20px}.survey-viewer .question{margin-top:15px}.survey-viewer .question:first-child{margin-top:0px}.survey-viewer .answer.multiple .placeholder{font-weight:bold}.survey-viewer .answer.multiple .choice.selected{font-weight:bold;color:#FF3C2B}\n",""])},31258:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".ui-badge-icon-tooltip{display:inline-block;background-color:#C9C9C9;padding:0px 5px;border-radius:2px;line-height:17px;margin-top:3px;margin-right:3px;height:18px}.ui-badge-icon-tooltip i{font-size:11px}.ui-badge-icon-tooltip .text{display:inline;margin-left:3px;font-size:12px}.ui-badge-icon-tooltip.orange{background-color:#FFB049;color:#000000}.ui-badge-icon-tooltip.red{background-color:#DB2323;color:#ffffff}\n",""])},92971:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,'.ui-chat-window{height:100%;float:left;background:#F2F5F8;border-top-right-radius:5px;border-bottom-right-radius:5px;color:#434651;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:flex-start}.ui-chat-messages{padding:20px 20px 20px;overflow-y:scroll;flex:1 0;width:100%}.ui-chat-messages ul{padding-left:0px}.ui-chat-message-date{color:#a8aab1;padding-left:6px}.ui-chat-message-composer{padding:10px 10px 0px 10px;flex:0 0 auto;width:100%;display:flex;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.ui-chat-message-composer .editor{flex:1 0}.ui-chat-message-composer .editor textarea{width:100%;border:none;padding:10px 10px;margin-bottom:5px;border-radius:5px;resize:none;outline:none}.ui-chat-message-composer .buttons{flex:0 0 auto;margin-left:10px;margin-bottom:10px;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:space-between;align-content:flex-start;align-items:flex-start}.ui-chat-message{list-style-type:none;padding-bottom:20px}.ui-chat-message.clearfix:after{visibility:hidden;display:block;font-size:0;content:" ";clear:both;height:0}.ui-chat-message.inbound .ui-chat-content{background:#94C2ED;float:right}.ui-chat-message.inbound .ui-chat-content:after{border-bottom-color:#94C2ED !important;left:93% !important}.ui-chat-message.inbound .ui-chat-metadata{text-align:right}.ui-chat-message.outbound .ui-chat-content{background:#86BB71}.ui-chat-message.outbound .ui-chat-content a{font-weight:bold;color:#bbffbb;text-decoration:underline}.ui-chat-message.outbound .ui-chat-status{color:#86BB71 !important}.ui-chat-buttons{margin-top:10px}.ui-chat-buttons .ui-chat-button{margin-left:8px}.ui-chat-buttons .ui-chat-button:first-child{margin-left:0px}.ui-chat-buttons.quick-replies .ui-chat-button{display:inline-block;border:1px solid #999999;padding:3px 10px;border-radius:15px;height:30px;line-height:22px;vertical-align:middle;background-color:#ffffff}.ui-chat-buttons.quick-replies .ui-chat-button:hover{background-color:#999999;color:#ffffff}.ui-chat-buttons.inline{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:flex-start}.ui-chat-buttons.inline .ui-chat-button{display:inline-block;border:1px solid #999999;padding:3px 10px;border-radius:4px;height:30px;line-height:22px;vertical-align:middle;background-color:#ffffff;flex:1 0;text-align:center;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.ui-chat-buttons.inline .ui-chat-button:hover{background-color:#999999;color:#ffffff}.ui-chat-buttons.card{width:90%;margin-top:-2px}.ui-chat-buttons.card .ui-chat-button{display:block;margin-left:0px;border:1px solid #86BB71;padding:3px 10px;height:30px;line-height:22px;background-color:#ffffff;margin-top:3px}.ui-chat-buttons.card .ui-chat-button:first-child{margin-top:0px}.ui-chat-buttons.card .ui-chat-button:last-child{border-bottom-left-radius:7px;border-bottom-right-radius:7px}.ui-chat-buttons.card .ui-chat-button:hover{background-color:#86BB71;color:#ffffff}.ui-chat-content{color:white;padding:8px 12px;line-height:23px;font-size:16px;border-radius:7px;margin-bottom:5px;width:90%;position:relative}.ui-chat-content:after{bottom:100%;left:7%;border:solid transparent;content:" ";height:0;width:0;position:absolute;pointer-events:none;border-bottom-color:#86BB71;border-width:10px;margin-left:-10px}.ui-chat-content.first-of-group,.ui-chat-content.first{border-bottom-left-radius:0px;border-bottom-right-radius:0px;margin-bottom:3px}.ui-chat-content.middle{border-radius:0px;margin-bottom:3px}.ui-chat-content.middle:after{display:none}.ui-chat-content.last{border-top-left-radius:0px;border-top-right-radius:0px}.ui-chat-content.last:after{display:none}.ui-chat-metadata{margin-bottom:15px}.ui-chat-message-user{display:inline-block}.ui-chat-status{margin-right:3px;font-size:10px}.ui-chat-status.online{color:#94C2ED}.ui-chat-status.offline{color:#E38968}.ui-chat-message-photo .ui-chat-content{padding:0px}.ui-chat-message-photo .ui-chat-content img{width:100%;border-radius:7px;border:3px solid #86BB71}\n',""])},43872:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".ui-survey-editor{margin-top:10px;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.ui-survey-editor .questions{order:0;flex:0 0 250px;align-self:auto;border:1px solid #dddddd}.rs-list-item{padding-top:0px;padding-bottom:0px}.ui-survey-question{display:block;height:80px;border-bottom:1px solid #eeeeee;background-color:#ffffff;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:center}.ui-survey-question .icons{display:inline-block;float:right}.ui-survey-question .grippy{content:'....';width:14px;overflow:hidden;height:80px;display:inline-block;overflow:hidden;line-height:5px;padding:3px 4px;cursor:move;vertical-align:middle;margin-top:-.7em;margin-right:.3em;font-size:12px;font-family:sans-serif;letter-spacing:2px;color:#cccccc;text-shadow:1px 0 1px #cccccc}.ui-survey-question .grippy::after{content:'.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..'}.ui-survey-question .grippy{flex:0 0 14px;height:75px}.ui-survey-question .indent{flex:0 0 4px;height:80px;background-color:#efefef}.ui-survey-question .content{flex:1 0;height:80px}.ui-survey-question .title{font-size:13px;color:#444444;display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;line-height:17px}.ui-survey-question .description{color:#999999;font-size:12px}.ui-survey-question:hover{text-decoration:none;background-color:#eeeeee}.ui-survey-question .selection-bar{width:4px;height:80px}.ui-survey-question.active .selection-bar{background-color:orange}.ui-survey-question.sorting{-webkit-box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75);-moz-box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75);box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75)}\n",""])},25730:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".ui-survey-editor .question-detail{order:0;flex:1 0 auto;align-self:auto;padding-left:10px}.ui-survey-editor .question-detail .title{margin-top:15px}.ui-survey-editor .question-detail .rs-btn-toolbar{margin-top:15px}.ui-survey-editor .question-detail .buttons{float:right}.ui-survey-editor .question-detail .buttons .rs-btn-toolbar{margin-top:0px}.ui-survey-editor .question-detail .configuration{margin-top:25px}\n",""])},46202:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".question-tag{display:inline-block;background-color:#333333;color:white;font-size:12px;border-radius:2px;padding:1px 3px;line-height:12px}.question-tag.large{font-weight:bold;border-radius:3px;height:35px;line-height:35px;vertical-align:middle;padding:0px 6px;font-size:22px}\n",""])},2477:(e,t,n)=>{var a=n(23645);(e.exports=a(!1)).push([e.id,".ui-survey-editor-multiple-answer{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:center;align-items:center}.ui-survey-editor-multiple-answer .placeholder{flex:0 0 36px;border-radius:6px;display:inline-block;background-color:#F4FDCE;border:1px solid #BCE747;width:36px;height:36px;text-align:center;vertical-align:middle;line-height:36px;font-weight:bold;margin-right:10px}.ui-survey-editor-multiple-answer .answer{flex:1 0}.ui-survey-editor-multiple-answer .controls{flex:0 0 auto;text-align:left;margin-left:5px}\n",""])},88333:e=>{var t={invalidPredicate:"`predicate` must be a function",invalidPropValidator:"`propValidator` must be a function",requiredCore:"is marked as required",invalidTypeCore:"Invalid input type",predicateFailureCore:"Failed to succeed with predicate",anonymousMessage:"<<anonymous>>",baseInvalidMessage:"Invalid "};function n(e){if("function"!=typeof e)throw new Error(t.invalidPropValidator);var n=e.bind(null,!1,null);return n.isRequired=e.bind(null,!0,null),n.withPredicate=function(n){if("function"!=typeof n)throw new Error(t.invalidPredicate);var a=e.bind(null,!1,n);return a.isRequired=e.bind(null,!0,n),a},n}function a(e,n,a){return new Error("The prop `"+e+"` "+t.requiredCore+" in `"+n+"`, but its value is `"+a+"`.")}e.exports={constructPropValidatorVariations:n,createMomentChecker:function(e,r,l,s){return n((function(n,i,o,c,u,m,d){var p=o[c],g=typeof p,h=function(e,t,n,r){var l=void 0===r,s=null===r;if(e){if(l)return a(n,t,"undefined");if(s)return a(n,t,"null")}return l||s?null:-1}(n,u=u||t.anonymousMessage,d=d||c,p);if(-1!==h)return h;if(r&&!r(p))return new Error(t.invalidTypeCore+": `"+c+"` of type `"+g+"` supplied to `"+u+"`, expected `"+e+"`.");if(!l(p))return new Error(t.baseInvalidMessage+m+" `"+c+"` of type `"+g+"` supplied to `"+u+"`, expected `"+s+"`.");if(i&&!i(p)){var f=i.name||t.anonymousMessage;return new Error(t.baseInvalidMessage+m+" `"+c+"` of type `"+g+"` supplied to `"+u+"`. "+t.predicateFailureCore+" `"+f+"`.")}return null}))},messages:t}},42605:(e,t,n)=>{var a=n(30381),r=n(10914),l=n(88333);e.exports={momentObj:l.createMomentChecker("object",(function(e){return"object"==typeof e}),(function(e){return r.isValidMoment(e)}),"Moment"),momentString:l.createMomentChecker("string",(function(e){return"string"==typeof e}),(function(e){return r.isValidMoment(a(e))}),"Moment"),momentDurationObj:l.createMomentChecker("object",(function(e){return"object"==typeof e}),(function(e){return a.isDuration(e)}),"Duration")}},10914:(e,t,n)=>{var a=n(30381);e.exports={isValidMoment:function(e){return!("function"==typeof a.isMoment&&!a.isMoment(e))&&("function"==typeof e.isValid?e.isValid():!isNaN(e))}}},33493:(e,t,n)=>{var a=n(42367);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)},73470:(e,t,n)=>{var a=n(47155);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)},87499:(e,t,n)=>{var a=n(13794);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)},70361:(e,t,n)=>{var a=n(55221);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)},81385:(e,t,n)=>{var a=n(31258);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)},62647:(e,t,n)=>{var a=n(92971);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)},83534:(e,t,n)=>{var a=n(43872);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)},7454:(e,t,n)=>{var a=n(25730);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)},34568:(e,t,n)=>{var a=n(46202);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)},89907:(e,t,n)=>{var a=n(2477);"string"==typeof a&&(a=[[e.id,a,""]]);var r={insert:"head",singleton:!1};n(93379)(a,r);a.locals&&(e.exports=a.locals)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,